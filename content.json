{"pages":[{"title":"关于我","text":"Zhang’s blog 📌我是谁 Hey, It’s me. 欢迎来到我的个人博客！这里是我用来舞文弄墨——啊不对，都是用电脑打字的，应该是舞键弄鼠的地方。 我是谁？我就是那个特别死宅但不肥的 “低端人口” 小末末（自己给自己取个高大上的英文名叫 Mooney），你要是不喜欢我的文章，那就关了；想要评论区轰炸、举报、DDoS 我也完全没意见。（因为根本没有评论区）我就是这样傲娇并且目中无人。 我的博客主页 https://www.weizhang.site 听说国内部署在Coding更快？ 我的博客主页 &lt;此节点已取消&gt; 📌版权声明 欢迎您的来访，同时也欢迎转载，但是请注意： 本博客所有原创文章，如未特殊声明，均采用知识共享署名 - 非商业性使用 - 相同方式共享 4.0 国际许可协议（CC-BY-NC-SA 4.0）进行许可。 这意味着，如果你转载，你：​ 需要保留我的署名（在正文中标注并保留原文、作者和原始链接)；​ 不得为商业目的而使用本作品；​ 若改变、转变或更改本作品，你需要同样使用 CC-BY-NC-SA 4.0（也就是 “传染性”）。​ 希望您尊重版权，尊重原创，谢谢！ 📌关于本站 Hi there! 本站就是本人的一个自留地，未必总会有什么阳春白雪的文章，可能有的时候只有吐槽和分享——嗯！？大概就是这样。 我在这里写下任何我想写下的内容，主题什么的不存在。从谈论自己，到谈论别人，再到评判现象，还有粗浅的技术，以及许许多多的乱七八糟的东西，我都有可能会在这里写出来。没有什么东西，除了我自己，能够阻止我在这里写下文章。 你也许不会喜欢博客中所有的内容，但那有什么关系呢？我既然没有给博客定主题，自然也没有打算吸引住任何一个人群的人。只要有一篇文章，甚至一句话能得到你的肯定，就是非常令人高兴的了。如果有好多文章被你所喜欢，那就更棒了！如果大多数文章都能抓住你的心的话……哈哈，那样的事情应该是不会发生的。 你也许会觉得我太激进，我太极端。你可能觉得社会主义就是好，分裂国家就是不对， iPhone 就是好， Android 就是垃圾，我就是个智障……但那也没有关系，作为不同的人，我们各自都有不同的想法，那是再正常不过的事情了。 📌关于我 或许你从我的博文风格可以看出来，我喜欢 IT，热爱开源，正在学习博客搭建；进一步挖掘，你会发现，我喜欢吐槽，热爱民主自由、憎恶独裁专制。 我是谁？过去、曾经、将来的我，又是怎样？或许，to infinity and beyond ? 或许，只有当我真正跳起并摔得很惨的时候，我才发现我只不过是玩具而不是巴斯光年吧。 小末末其人 Mooney是谁？简而言之就是个不懂编程、没啥技术还好啰嗦并且喜欢瞎折腾的人。B站昵称：“末末爱折腾” 大概就是这个意思吧~ 不懂编程？因为我不曾了解某一门语言，不曾写过总结性很强的文章，也不对它的某个特性理解的比较透彻，一切只是顺势而为。 没啥技术还好啰嗦？从文章分类和B站视频你能发现我总是倾向发布随性而为的所谓 “教程”，也就是自己经验的总结；从一些页面和博文的措辞你能发现，废话太多；但依旧在不停捣鼓折腾的人。 小末末的过去 建站那个寒假嘛，算是人生的一个小小转折点。由于不可描述的原因，开学后导致整个学期都在打游戏，整个学期都在荒废中度过，体验了一番古人们 “明朝散发弄扁舟” 的感觉。 再后来，发现科学上网有点难哦，于是就去 vultr 买了个 VPS ($3.5/月)，搭建起了 shadowsocks，幸运的是vultr至今都没有被请去喝茶，依旧运行正常。搭建完了呢，觉得有些浪费唉，就又顺手搭建了一个博客玩玩。 这下可好，我渐渐地爱上了写博客。自己独立域名的博客，多么有自豪感，虚荣心得到了极大的满足。现在，时过境迁，最终还是把博客放到了GitHub上。 为什么要叫小末末呢？记不得了，好像这是我的某位小伙伴对我的称呼。Auld Lang Syne. 哎对了，这个 MoMo 不好吃也不能吃，珍爱生命远离毒 MoMo、MoMo 渣。 小末末的现在 还是不要问我是谁，俺只是一个默默无名的傻子(其实博客标题还有许多地方都写了(｡･ω･｡)…) 我相信开放和自由，相信开放的技术和标准，以及言论自由，反对任何形式的” 阉割 “。这自由的含义，懂的人自然会懂；不懂的人也多说无益。为什么要唤醒假装睡觉的脑残呢？ 多多学习，多写文章，多多的记录生活。恰如博客曾经的副标题所说，执着于心，谦和之中见卓越；现如今，博客副标题已经改成了 “Remember me”，取自于 Crysis 3 最后一句台词。我该问自己，What are you prepared to sacrifice ? 其实，写文章本身就是对知识的一种梳理，更能在梳理中学到更多的知识。有的时候会有这样的感觉，你知道这种东西，但是让你用文字表达出来，却噎住写不出来了。缺少历练，外加快餐文化、碎片式阅读的影响——现在还有多少人喜欢读长文呢？我很喜欢。 小末末的将来 在可遇见的未来，这个博客将作为我的 “个人吐槽库” ——记录我的生活中的各种事情，大概就是这样。 就目前为止，我是这个博客唯一的一名作者。尽管没什么名气，没什么访问量，也不是全职博主，我也依旧乐此不疲的写着博客。就是这么自我满足！ 或许某一天这个博客会火起来，或许就这样一直默默无闻下去…… 我会尽可能提高自身的思想技术水平，争取写出来更多优秀的文章！ 小末末的近况 现在“光荣”的成为了一名打工人，正在走在修仙的路上。近况就是这样。 📌联系方式 有什么问题或建议，可以选择 QQ、微信、bilibili、知乎、简书、发邮件、留言板 (暂未开放) 与我取得联系，我会尽快回复的。不过，如果是问问题的话，其实我也不大会哈！ 友情提示：博主脾气暴躁、耐心极差，并且没有❤️同情心。 【Github】 【bilibili】 【Coding】&lt; *几乎不用* &gt; 【简书】&lt; *几乎不用* &gt; 【知乎】&lt; *几乎不用* &gt; 【QQ】&lt; *2590305902* &gt; 【WeChat】&lt; *zw2590305902* &gt; 快来关注我吧~ 如果你有发现内容错误、无法加载、加载失败等问题，也欢迎私信告诉我哈~ 当然，如果你发现加载慢，就不用私信我了，我也知道加载慢~ 📌友情链接 我的小伙伴们~ 欢迎互关友链哦~ 如果你想和我结交的话，快来联系我吧~ 📌支持作者 能够看到这里，我就已经很感激啦。不过如果真的很想支持的话，那么就更棒啦。 📌传播 (ಡωಡ) 人们都希望被别人需要 却往往事与愿违。​ 所以，被人需要是一种很美好的感觉。如果你认为某些文章值得再次分享，那么分享出去就是非常好的帮助了。 📌建议 (๑ᵔ⌔ᵔ๑) 如果你觉得我有哪里做得不好，哪篇文章的内容不认同的话，请通过以上的联系方式像我传达！可能也许我并不认同你的想法，但是，我会在自己的地盘上维护最大可能的言论自由。毕竟，只有言论自由才能够促进思维火花的碰撞。可是广告和情况恶劣的垃圾评论还是别尝试了吧～ 还记得吗，宪法原则中最重要的是 “自由思想的原则” ——不是确保我们喜欢的思想的自由，而是确保我们所憎恨的思想的自由。 📌使用推荐服务 (๑˙ー˙๑) 如果你恰巧需要购买 VPS 的话，那么也许可以尝试用我的 vultr 推荐链接； 如果你恰巧需要买域名的话，那么也可以来使用我的 Namesilo 推荐链接；​ 算了还是自行百度或Google吧； 如果你恰巧需要一个 VPN 什么的用来科学上网，那么也可以来戳我的推荐链接。 📌塞钱钱 ($ _ $) 好啊好啊，不过作为一个闲言碎语的个人博客，确实感觉没有做出什么大的贡献。如果真的有人想直接塞钱的话，那真的是受宠若惊了。 还木有添加收款方式 不不不，打赏方式就在文章结尾处。 📌来点 CPU (ง ˙o˙)ว 来吧，释放你的 CPU，记得先关掉 NoScript/ABP 什么的。 还木有添加脚本 由于部署了过多特效类的JS脚本，手机端浏览已经很卡了。 不过好在PC端还是比较漂亮的。 目前采用的简洁icarus主题，简洁又漂亮，后续会优化网页响应速度的(○ﾟεﾟ○) 📌站点日志 2020-XX-XX 来自未来的更新日志 许久未写文章，文笔有些生疏了网站开始周更模式 未来可期(ಡωಡ) 2020-11-16 更新日志 重构网站，从简出发 框架 : Hexo 部署 : Github 主题 : icarus 2020-03-12 更新日志 网站过于卡顿，寻找简洁好看的主题中站点暂停更新… 归根结底还是懒(ಡωಡ) 2019-12-20 更新日志 添加大量花里胡哨的特效 (⑉°з°)-♡ 添加留言/评论系统 添加数据统计与分析功能 添加网易云音乐播放器 添加背景音乐 自定义鼠标指针样式 添加彩色滚动变换字体 添加人体时钟等有趣的挂件 添加网站雪花飘落效果 2019-09-19 更新日志 新购域名 添加博客独立域名: https://www.weizhang.site 暂停 Coding 平台的服务 2019-05-02 更新日志 站点日常维护 修复了一堆说了你也听不懂的小bug (ಡωಡ) 2019-03-24 更新日志 优化访问速度 启用Github+Coding双线部署 国外节点：Github —点 这里 立即访问 国内节点：已弃用 —点 这里 立即访问 修复了图片不显示的问题 添加了外链视频播放器 2019-03-19 更新日志 添加了一些花里胡哨的功能 增添了一个萌萌哒的卡通人物（看板娘） 添加鼠标点击爱心效果 (⑉°з°)-♡ 添加鼠标点击爆炸效果 添加网站动态线条背景 添加网站正常运行时间 添加鼠标点击显示字体效果 添加文章字数统计以及阅读时长 2019-03-17 更新日志 基本功能的设置和修改 删除RSS订阅功能 添加README.md文件 添加打赏功能 添加分享功能 添加站点内容搜索功能 设置网站的图标Favicon 浏览器网页标题切换恶搞 其他一些基本的设置 2019-03-16 博客建立 站点建立与部署 框架 : Hexo 部署 : Github 主题 : indigo","link":"/about/index.html"}],"posts":[{"title":"Hexo + icarus 博客搭建（一）","text":"本文主要介绍 Hexo + icarus 基础环境搭建，包含 Hexo 框架的下载安装，icarus 及其组件的下载安装，完成以下操作步骤将初步完成 Hexo 博客 + icarus 主题的配置。后续将对 Hexo 博客进行功能扩展。 来到这里相信你已经正确安装 Hexo 博客的基础运行环境了。 即： 已安装 Git 1$ git --version # 查看 git 版本 已安装 Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本) 12$ node -v # 查看 node.js 版本$ npm -v # 查看 npm 包管理器版本 如未正确安装，请参照 Hexo官方文档 进行安装，以下操作均基于Windows平台。 安装Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo 框架。 1$ npm install -g hexo-cli # 全局安装 Hexo 框架 查看 Hexo 版本，检查是否安装成功。 1$ hexo -v Hexo 初始化在任意位置新建一个文件夹，取名 blog，在blog/ 目录下 打开 CMD 窗口，运行以下命令，进行 Hexo 框架初始化。 1$ hexo init # Hexo 初始化 下载icarus主题运行下列命令以下载 icarus 主题，此处可能下载较慢，请耐心等待。 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 切换icarus主题打开 _config.yml 文件，将 thems 项的值更改为 icarus 启动Hexo1$ hexo g # 生成静态页面 这里会提示错误 ERROR 我们根据上图中的错误提示安装 icarus 主题所需组件。 1$ npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.10.1 inferno@^7.3.3 inferno-create-element@^7.3.3 再依次运行命令行，重新生成静态页面，并启动 Hexo 服务。 12$ hexo g # 生成静态页面$ hexo s # 启动服务 打开浏览器输入下列网址预览效果。 1http://localhost:4000 添加 自定义页面 新建一个 分类 页面 1$ hexo new page categories 新建一个 标签 页面 1$ hexo new page tags 新建一个 关于我 页面 1$ hexo new page &quot;about&quot; 新建一个 自定义 页面 1$ hexo new page &quot;guestbook&quot; 接着在主题的 _config.yml 文件中的 menu 中进行配置，icarus 主题在 _config.icarus.yml 文件中的 navbar –&gt; menu 中进行配置，如图。 写作123$ hexo new [layout] &lt;title&gt; # layout布局默认为post，有三种默认布局即post、page 和 draft，在创建者三种不同类型的文件时，它们将会被保存到不同的路径；# 而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。 新建一篇文章示例： 1$ hexo new 第一篇文章的名字 在此之前通常建议开启 _config.yml 中的资源文件夹，以便创建文章的同时，自动为你创建同名资源文件夹，这通常用于存放你在本篇文章所用到的图片等资源。存在此文件夹中的图片，Hexo 生成静态页面时，将会将二者存放在同一文件夹下。 1post_asset_folder: true # 开启文章资源文件夹 部署在正式开始部署上传到 GitHub 上前，通常建议配置 SSH 秘钥，这样不用每次上传部署都要进行登录验证，有关如何配置 SSH 秘钥，请参阅 ————–此处省略10000字————————- ————–挖坑1：GitHub 添加 SSH————— 详情请参阅：Git配置SSH秘钥 ————–挖坑2：GitHub 静态页面————— 首先在_config.yml中修改添加以下内容，指定部署上传的 GitHub 库。 123456789deploy: type: git repo: git@github.com:local-host-8080/local-host-8080.github.io.git branch: master type: git repo: &lt;repository url&gt; branch: [branch] message: [message]Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}) 安装 git 组件1$ npm install hexo-deployer-git --save 此外，如果您的 Github Pages 需要使用 CNAME 文件自定义域名，请将 CNAME 文件置于 source/ 目录下，只有这样 hexo deploy 才能将 CNAME 文件一并推送至部署分支。 上传至GitHub1$ hexo d 暂时就这样…","link":"/2020/11/18/10_Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%E4%B8%80/"},{"title":"Hexo博客添加RSS订阅","text":"虽然RSS订阅基本没什么人用，但作为一个基本功能，该加上的还是得加上。 安装Feed插件在 blog/ 根目录打开终端窗口，运行如下命令 1$ npm install hexo-generator-feed --save 安装成功效果如图所示 配置Feed打开_config.yml配置文件，在里面新增如下配置： _config.yml12345678910111213feed: enable: true type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: ' ' order_by: -date icon: icon.png autodiscovery: true template: 具体可以参照 hexo-generator-feed 官方配置文档 附：参考视频","link":"/2020/11/20/12_Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0RSS%E8%AE%A2%E9%98%85/"},{"title":"Hexo + Icarus3 + live2d 给博客添加看板娘","text":"Hexo + Icarus3 + live2d 给博客添加看板娘 下载live2D进入博客根目录 blog/ 执行如下命令 12$ cd themes/icarus/source # 进入主题的 source 目录$ git clone https://github.com/stevenjoezhang/live2d-widget.git 修改配置导入css依赖(非必须)找到themes/icarus/layout/common/head.jsx 插入css依赖 大概是在一百六十多行的样子吧 或者可以在head.jsx内搜索&lt;link&gt;标签 然后插入这行 1&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;/&gt; 修改后如下图 但是一般情况我们最好在 icarus 主题配置文件 _config.icarus.yml 中的 providers 项中的 iconcdn 值填写合适的CDN，而不直接修改 icarus 源文件。 12# iconcdn: fontawesomeiconcdn: https://cdn.bootcdn.net/ajax/libs/font-awesome/5.12.0/css/all.css 修改刚下载的 live2d-widget 下的autoload.js注释掉第二行，放开第三行 123// 注意：live2d_path 参数应使用绝对路径// const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;;const live2d_path = &quot;/live2d-widget/&quot;; 修改后的autoload.js如下图 在主题内导入autoload.js 导入的前提是 live2d-widget 文件夹的位置在 themes/icarus/source 下 找到 theme/icarus/layout/common/scripts.jsx 在末尾处 &lt;Fragment&gt; 标签内添加 1&lt;script src={url_for('/live2d-widget/autoload.js')}&gt;&lt;/script&gt; 开启 live2d编辑主题配置文件_config.yml 添加 12live2d: enable: true 这样一个漂亮的看板娘就引入完成了！ 常见问题看板娘到这儿应该就可以出来了 但是有部分老旧的 icarus 主题版本可能会在 icarus 的样式下面，这时候需要把看板娘给置顶。 找到live2d-widget下的waifu.css 修改33行id为#waifu的样式 把z-index:1修改为z-index:1000； 估计作者修改了，反正我是没遇到~","link":"/2020/11/23/13_icarus%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/"},{"title":"站点基准测试文件","text":"外面看不到，防窥线，外面看不到，防窥线，外面看不到，防窥线。 三线防窥 引用块 示例1：引用书中句子 123{% blockquote 作者名字, 出处 %}星光不问赶路人，时光不负有心人。{% endblockquote %} 实际效果 星光不问赶路人，时光不负有心人。 作者名字出处 示例2：引用网友句子 123{% blockquote @作者名字 https://weizhang.site %}星光不问赶路人，时光不负有心人。{% endblockquote %} 实际效果 星光不问赶路人，时光不负有心人。 @作者名字weizhang.site 示例3：引用网络上的文章 123{% blockquote 作者名字 https://weizhang.site 文章名字 %}星光不问赶路人，时光不负有心人。{% endblockquote %} 实际效果 星光不问赶路人，时光不负有心人。 作者名字文章名字 标题 六级标题显示效果 H1H2H3H4H5H6分隔线123456789**** * ******- - ----------- 分割线显示效果 字体123456*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___ 文本效果展示 斜体文本斜体文本粗体文本粗体文本粗斜体文本粗斜体文本 1&lt;u&gt;下划线&lt;/u&gt; 下划线 1~~删除线~~ 删除线 1&gt; 文本引用 `代码区域` 文本引用 代码区域文本引用 代码区域 脚注 脚注是对文本的补充说明，Markdown 脚注的格式如下 1[^要注明的文本] 创建脚注格式类似这样 [^MOONEY] [^MOONEY]: MOONEYZW – 前路漫漫，未来可期！！！ 列表无序列表 无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格 无序列表 无序列表 无序列表 无序列表 无序列表 无序列表 无序列表 无序列表 有序列表 有序列表 有序列表 有序列表 有序列表 有序列表 有序列表 有序列表 有序列表 有序列表 列表嵌套 列表嵌套：列表嵌套只需在子列表中的选项前面添加四个空格即可。 第一项： 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项： 第二项嵌套的第一个元素 第二项嵌套的第二个元素 折叠列表 武器 火神机枪 步枪 手枪 武器 火神机枪 步枪 手枪 武器 火神机枪 步枪 手枪 区块123&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套 效果展示 最外层 第一层嵌套 第二层嵌套 区块中使用列表123456&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项 效果展示 区块中使用列表 第一项 第二项 第一项 第二项 第三项 列表中使用区块1234* 第一项 &gt; 菜鸟教程 &gt; 学的不仅是技术更是梦想* 第二项 效果展示 第一项 菜鸟教程学的不仅是技术更是梦想 第二项 代码块123456789101112// 这是Java代码块 import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.ServerSocket;import java.net.Socket;public class ServerSocketDemoMain { public static void main(String[] args) { System.out.println(&quot;测试代码块！&quot;); }} 折叠代码块 >folded1...折叠代码块内容...代码块的默认折叠状态。可以是&quot;&quot;, &quot;folded&quot;, &quot;unfolded&quot; 超链接 示例： 1[我的博客](https://weizhang.site) 效果 我的博客 高级链接 我们可以通过变量来设置一个链接，变量赋值在文档末尾进行： 123456这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [runoob]: http://www.runoob.com/ 效果展示 这个链接用 1 作为网址变量 Google这个链接用 MOONEY 作为网址变量 MOONEY然后在文档的结尾为变量赋值（网址） 图片资源 示例1： 12// 引用 source 目录下的图片![图片描述](/img/og_image.png) 效果 示例2： 12// 引用 source 目录下的图片![图片描述](./og_image.png) 效果 示例3： 1234&lt;div align=center&gt; &lt;img src=&quot;./og_image.png&quot; width=&quot;45%&quot;&gt; &lt;img src=&quot;./og_image.png&quot; width=&quot;45%&quot;&gt;&lt;/div&gt; 效果 表格1234|表头|表头|表头|表头|表头||:----|:----|:----:|:----|:----||单元格|单元格|单元格|单元格|单元格||单元格|单元格|单元格|单元格|单元格| 效果展示 表头 表头 表头 表头 表头 单元格 单元格 单元格 单元格 单元格 单元格 单元格 单元格 单元格 单元格 支持的 HTML 元素 目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt; 等 1使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑 效果 使用 Ctrl + Alt + Del 重启电脑 视频资源 示例1： 12{% youtube video_id %}{% vimeo video_id %} 公式 当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如： 12345678$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\\\end{vmatrix}${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}$$ 效果展示 $$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix}\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}$$ 图横向流程图源码格式123456graph LRA[方形] --&gt;B(圆角) B --&gt; C{条件a} C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图] 源代码 12345678​```mermaidgraph LRA[方形] --&gt;B(圆角) B --&gt; C{条件a} C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图]​``` 竖向流程图源码格式123456graph TDA[方形] --&gt; B(圆角) B --&gt; C{条件a} C --&gt; |a=1| D[结果1] C --&gt; |a=2| E[结果2] F[竖向流程图] 源代码 12345678​```mermaidgraph LRA[方形] --&gt;B(圆角) B --&gt; C{条件a} C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图]​``` 标准流程图源码格式123456789st=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st-&gt;op-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op 源代码 1234567891011​```flowst=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st-&gt;op-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op​``` 标准流程图源码格式（横向）123456789st=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st(right)-&gt;op(right)-&gt;condcond(yes)-&gt;io(bottom)-&gt;econd(no)-&gt;sub1(right)-&gt;op 源代码 1234567891011​```flowst=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st(right)-&gt;op(right)-&gt;condcond(yes)-&gt;io(bottom)-&gt;econd(no)-&gt;sub1(right)-&gt;op​``` UML时序图源码样例：12345对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？ 源代码 1234567​```sequence对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？​``` UML时序图源码复杂样例1234567891011Title: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩 源代码 12345678910111213​```sequenceTitle: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩​``` UML标准时序图样例123456789101112%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头 sequenceDiagram participant 张三 participant 李四 张三-&gt;王五: 王五你好吗？ loop 健康检查 王五-&gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 &lt;br/&gt;看医生... 李四--&gt;&gt;张三: 很好! 王五-&gt;李四: 你怎么样? 李四--&gt;王五: 很好! 源代码 1234567891011121314​```mermaid%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头 sequenceDiagram participant 张三 participant 李四 张三-&gt;王五: 王五你好吗？ loop 健康检查 王五-&gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 &lt;br/&gt;看医生... 李四--&gt;&gt;张三: 很好! 王五-&gt;李四: 你怎么样? 李四--&gt;王五: 很好!​``` 甘特图样例12345678910111213141516171819%% 语法示例 gantt dateFormat YYYY-MM-DD title 软件开发甘特图 section 设计 需求 :done, des1, 2014-01-06,2014-01-08 原型 :active, des2, 2014-01-09, 3d UI设计 : des3, after des2, 5d 未来任务 : des4, after des3, 5d section 开发 学习准备理解需求 :crit, done, 2014-01-06,24h 设计框架 :crit, done, after des2, 2d 开发 :crit, active, 3d 未来任务 :crit, 5d 耍 :2d section 测试 功能测试 :active, a1, after des3, 3d 压力测试 :after a1 , 20h 测试报告 : 48h 源代码 123456789101112131415161718192021​```mermaid%% 语法示例 gantt dateFormat YYYY-MM-DD title 软件开发甘特图 section 设计 需求 :done, des1, 2014-01-06,2014-01-08 原型 :active, des2, 2014-01-09, 3d UI设计 : des3, after des2, 5d 未来任务 : des4, after des3, 5d section 开发 学习准备理解需求 :crit, done, 2014-01-06,24h 设计框架 :crit, done, after des2, 2d 开发 :crit, active, 3d 未来任务 :crit, 5d 耍 :2d section 测试 功能测试 :active, a1, after des3, 3d 压力测试 :after a1 , 20h 测试报告 : 48h​```","link":"/2019/03/17/1_%E7%AB%99%E7%82%B9%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6/"},{"title":"素数判断的几种方法代码实现及其复杂度分析","text":"摘要 素数是证书的基本构件。无穷多素数展现出的某些模式可以说是整个数论甚至是数学所有领域中最深刻、最优美的。 文章是在大学初期接触 C 语言，学习求素数算法中找到的好文章，为转载，但因为原文地址实在是找不到了，所以不放原文链接。 对于一个整数，怎么判别它是不是素数，这是一个值得深入研究的问题。本文针对几种经典的判断素数方法进行分析，利用计算机模拟实现其算法。并对这些算法进行复杂度分析，在不同数据规模下进行合适的算法实现。 关键字：素数判断 爱拉托逊斯筛选法 费马测试 米勒 拉宾测试 一、朴素判断素数 根据素数的定义，约数只有 1 和它本身的整数称为素数，假设一个整数为 n ，于是最朴素的判断 n 是否为素数的方法就是从 2 到 n-1 都枚举一遍，判断是否存在能整除 n 的整数，如果都不能则 n 为素数。 代码实现如下： 123456bool Brute_Force(int n){ for (int i=2;i&lt;=n-1;i++) if (n%i==0) return false; return true;} 此函数返回 true 则说明 n 为素数，反之不是。 很容易发现，这种方法判断素数，对于一个整数 n, 需要 n-2 次判断，时间复杂度为 O(n) 的。在 n 非常大或者测试量很大时，这种方法显然是不可取的。 二、改进朴素判断素数 对于一个小于 n 的整数 x ，如果 n 不能整除 x ，则 n 必然不能整除 n/x 。反之相同。 所以我们按照素数定义来判断素数时，可以进行一个较为明显的优化。即我们只需从 2 枚举到 √𝑛 即可。因为在判断 2 的同时也判断了 n/2 …… 以此类推，到 √𝑛 时就把 2 到 n-1 的数都判断过了。 代码实现如下： 1234567bool Brute_Force2(int n){ for (int i=2;(__int64)i*i&lt;=n;i++) if (n%i==0) return false; return true;} 这里使用 i*i&lt;=n 来取代 i&lt;=i&lt;=√𝑛 是为了避免是用 sqrt() 函数，其消耗时间很大，在大量数据测试中时间消耗很明显。 同时强制转换 i 成 _int64 类型是为了防止 i*i 在 int 范围内溢出。 此算法的时间复杂度也很容易得出，对于一个整数 n ，需要测试 √𝑛-1 次，所以本算法的时间复杂度为 O(O(√𝑛) 的。 三、标准的 爱拉托逊斯筛选法 爱拉托逊斯筛选法（以下简称筛法），是一种高效的判断素数的方法。 能够一次性的筛选出某个区间的素数。其算法原理本质还是充分利用了素数的定义，即素数的约数只有 1 和它本身。 如果某个数 m 是另一个数 n 的倍数，则说明 m 肯定不是素数。所以我们只要在某个范围内，将已知素数的所有倍数都筛去，剩下的肯定是素数。因为只有它不是其他数的倍数（ 1 和本身除外）。 具体做法是：先把 N 个自然数按次序排列起来。 1 不是质数，也不是合数，要划去。第二个数 2 是质数留下来，而把 2 后面所有能被 2 整除的数都划去。 2 后面第一 个没划去的数是 3 ，把 3 留下，再 把 3 后面所有能被 3 整除的数都划去。 3 后面第一个没划去的数是 5 ，把 5 留下，再把 5 后面所有能被 5 整除的数都划去。 这样一直做下去，就会把不超过 N 的全部合数都筛掉，留下的就是不超过 N 的全部质数。因为希腊人是把数写在涂腊的板上，每要划去一个数，就在上面记以小点，寻求质数的工作完毕后，这许多小点就像一个筛子，所以就把埃拉托斯特尼的方法叫做 “埃拉托斯特尼筛”，简称 筛法 。（另一种解释是当时的数写在纸草上，每要划去一个数，就把这个数挖去，寻求质数的工作完毕后，这许多小洞就像一个筛子。） 代码实现如下： 1234567891011121314#define MAX 10007bool isprime[MAX];void TheSieveofEratosthees(){ int i,j; for (i=2;i&lt;MAX;i++) isprime[i]=1; for (i=2;i&lt;MAX;i++) { if (isprime[i]) for (j=i+i;j&lt;MAX;j+=i) isprime[j]=0; }} 在执行完本算法后，isprime[i]=1 则说明 i 是素数。所以本算法在执行完一遍后，就能在 O(1) 的时间复杂度内判断 MAX 以内的任意数是否为素数。所以整个算法的时间消耗都在筛法的效率上。乍看筛法的时间复杂度貌似是 O(n^2) 的，但是其实不然，第二个循环中，每次递增的 i ，当 i 越来越大时， j 很快就能超过 M 。其实筛法的实际复杂度是： 在可以测试的范围内， 其实是接近线形的，虽然实际上不是。 这个是筛法的精妙所在。 四、改进的 爱拉托逊斯筛选法 理论上筛法在可以测试的范围内，已经接近线性的复杂度了，对于一般的需要来说，已经没有什么必要去优化筛法了。但是为了更深入或者满足更苛刻的效率要求，标准的筛法还是有可以改进的地方的，使得筛法在常数级别上得到降低。 实际上在 2007 年， 复旦的 xreborner 已经将筛法改进为真正的线性时间复杂度。 该改进算法是增加了一个数组，记录已经找到的素数，通过这些已经找到的素数，来筛掉后面的数，由于每个数都能分解成质因数的形式，所以所有质因数都被筛掉后，自然不在素数列表中了。 代码实现如下： 123456789101112131415#define MAX 10007bool isprime[MAX];int p[MAX];void prime(int n) { memset(isprime, 0, sizeof isprime); memset(p, 0, sizeof p); int np = 0; for (int i = 2; i &lt;= n; i++) { if (!isprime[i]) p[np++] = i; for (int j = 0; j &lt; np &amp;&amp; p[j]*i &lt;= n; j++) { isprime[p[j]*i] = 1; if( i % p[j] == 0) break; } }} 这个算法的关键在于 if(i%pr[j] == 0) break; 。它使得任何一个合数，只被它最小的质因数标记过一次。所以整个算法是线性的。但考虑到 log(log(100000000)) 还不到 3 ，故这个线性算法其实也只有理论上的价值罢了。 五、朴素判断+筛法 通过上面的筛法实现可以看出，用筛法直接判断素数是很有限的，筛法受内存的限制，要判断 n 是否为素数，需要开大小为 n 的 bool 数组。当 n 很大的时候，显然是不可取的。所以我们可以折中以上两种算法，将朴素判断和筛法结合在一起，使得朴素判断能得到进一步的优化。 方法二中朴素判断的优化已经大大降低了复杂度。其实我们再深入理解就会发现，其实从 2 到 √𝑛 中，也是有很多判断是没必要的，比如某个数 n 不能被 2 整除，则必然不能被 4 整除（其实 2 的倍数都不能）。所以用筛法预处理出小于 √𝑛 的所有素数 。这样在大量数据测试的时候效率提高很多。 代码实现如下： 1234567891011121314151617181920void prime(int n) { memset(isprime, 0, sizeof isprime); memset(p, 0, sizeof p); np = 0; for (int i = 2; i &lt;= n; i++) { if (!isprime[i]) p[np++] = i; for (int j = 0; j &lt; np &amp;&amp; p[j]*i &lt;= n; j++) { isprime[p[j]*i] = 1; if( i % p[j] == 0) break; } }}bool Brute_Force3(int n){ for (int i=0;p[i]*p[i]&lt;=n;i++) if (n%p[i]==0) return false; return true;} 由以上 5 种方法可以看出，并不是朴素算法就一定没优点，也不是高效的筛法就很完美，有时候经过深入了解，将各种已经存在的算法组合在一起也能发挥很大的效果，从而达到优化原先算法的程度。 上面的算法总时间复杂度理论上也是 (O(√𝑛) 的，但是常数上已经得到很大的优化，效率上比原来改进的朴素快了好几十倍之多。数据范围越大，其优化效果也明显。 六、费马素性测试 费马小定理说的是：如果 p 是一个素数，那么对于任意一个整数 a ，a p − a 能被 p 整除，也可以用模运算表示如下： 这个定理又如下变式：如果 p 是一 个素数，且整数 a 与 p 互素，那么 a p −1 −1 可以被 p 整除，用模运算表示如下： 还有一种表述是：如果 p 是一个素数， a 是一个整数且 a 不包含因数 p ，那么 a p −1 -1 可以被 p 整除。 费马小定理是费马素性测试的基础。 费马在给出此定理的时候未给出证明，第一个证明其的人是 Gottfried Leibniz 。费马素性测试是判断一个数是否为素数的一个基于概率的测试。事实上，费马小定理的逆否定理成立，而费马小定理的逆定理是不成立的，而费马素性测试就是基于费马小定理的 “逆定理” 的。 大概的算法描述是，当 p 为奇数时（偶数特判一下就行啦，不就一个 2 嘛）让 a 在 1-p 之间 包括 1 和 p ）选取随机值，如果等式不成立，那么 p 肯定不是素数，如果成立，那么 p 就有较大可能是素数，我们称他为伪素数。当然，费马素性测试是有极大缺陷的，因而基本上平时没有多大用武之地。一个缺陷就是 Carmichael 数的存在， Carmichael 数是指如果一个数 n 可以通过所有 ‘ 值的费马素性测试却并非为素数，那么就叫 n 为 Carmichael 数。这样的数随着 n 的增大而越来越少的，这些数中，最小的一个是 561. 费马测试的具体实现是，对于 N ，从素数表中取出任意的素数对其进行费马测试，如果取了很多个素数， N 仍未测试失败，那么则认为 N 是素数。当然，测试次数越多越准确，但一般来讲 50 次就足够了。另外，预先用 小学生 的算法构造一个包括 500 个素数的数组，先对 Q 进行整除测试，将会大大提高通过率 。 代码实现如下： 1234567891011121314151617181920212223242526272829303132333435363738int Montgomery(int n,int p,int m){ //快速计算(n^e)%m的值,即逐次平方法 intk=1; n%=m; while(p!=1) { if(0!=(p&amp;1)) k=(k*n)%m; n=(n*n)%m; p&gt;&gt;=1; } return(n*k)%m;}void prime(int n) { np = 0; for (int i = 2; i &lt;= n; i++) { if (!isprime[i]) p[np++] = i; for (int j = 0; j &lt; np &amp;&amp; p[j]*i &lt;= n; j++) { isprime[p[j]*i] = 1; if( i % p[j] == 0) break; } }}bool IsPrime3(int n){ if ( n &lt; 2 ) { // 小于2的数即不是合数也不是素数 return false; } for (int i=0;i&lt;np;++i) { // 按照素数表中的数对当前素数进行判断 if (1!=Montgomery(p[i],n-1,n))//蒙格马利算法 { return false; } } return true;} 七、米勒 拉宾素性测试 拉宾米勒测试是一个不确定的算法，只能从概率意义上判定一个数可能是素数，但并不能确保。 但是也是目前公认最高效的素性测试之一。 算法流程如下： 选择 T 个随机数 A ，并且有 A&lt;N 成立。 找到 R 和 M ，使得 N=2*R*M+1 成立。快速得到 R 和 M 的方式： N 用二进制数 B 来表示，令 C=B-1 。因为 N 为奇数（素数都是奇数），所以 C 的最低位为 0 ，从 C 的最低位的 0 开始向高位统计，一直到遇到第一个 1 。这时 0 的个数即为 R M 为 B 右移 R 位的值。 如果 A^M%N=1 ，则通过 A 对于 N 的测试，然后进行下一个 A 的测试。 如果 A^M%N!=1 ，那么令 i 由 0 迭代至 R ，进行下面的测试。 如果 A^((2^i)*M)%N=N-1 则通过 A 对于 N 的测试，否则进行下一个 i 的测试。 如果 i=r ，且尚未通过测试，则此 A 对于 N 的测试失败，说明 N 为合数。 进行下一个 A 对 N 的测试，直到测试完指定个数的 A 。 通过验证得知，当 T 为素数，并且 A 是平均分布的随机数，那么测试有效率为 1/(4^T) 。如果 T &gt; 8 那么测试失误的机率就会小于 10^(-5)，这对于一般的应用是足够了。如果需要求的素数极大，或着要求更高的保障度，可以适当调高 T 的值。 代码实现如下： 1234567891011121314151617181920212223242526272829303132long long Pow_mod(long long bs,long long power,long long diver){ if(power==0) return(1); else if(power==1) return(bs); else if ((power&amp;1)==0) return(Pow_mod(bs*bs%diver,(power&gt;&gt;1),diver)); else return(Pow_mod(bs*bs%diver,power/2,diver)*bs%diver);}bool M_R(long long base,long long num){ d=num-1; while((d&amp;1)==0) { d=(d&gt;&gt;1); } if((Pow_mod(base,d,num)==1)||(Pow_mod(base,d,num)==num-1)) return true; else { t=(num-1)/2; while(d!=t) { d=(d&lt;&lt;1); if(Pow_mod(base,d,num)==num-1) return true; } return false; }} 由于能用逐次平方法在 O(logn) 的时间内算出 a^b mod c. 米勒拉宾的算法时间主要是花在这里了，所有米勒 拉宾算法的时间复杂度是 O(logn) 的。对于朴素判断优化的 O(√𝑛 ) 要快了好多。 八、总结与期望 通过以上 7 种判断素数方法的深入了解和代码实现，可以发现素数确实是数论中相当重要的一个组成元件。其涉及的方面相当广泛。 通过以上几种方法的分析，我们能更清晰更具体的看到素数判断在不同的需求下，会有不同的算法选择。高效的筛法却不能逃避内存的限制，而米勒 拉宾测试是一种不确定的算法，有不确定性，这些都是高效算法所需要付出的代价。 深入了解这些算法思想，能让我们在面 对更多更难的问题时，能够冷静思考，从其定义和性质来分析，进一步分解问题，从而达到高效的解决。 参考文献 [1] Joseph H.Silverman, A Friendly Introduction to Number Theory(Third Edition),China Machine Press[2] 刘汝佳，《算法艺术与信息学竞赛》[3] Tho mas H.Cormen Charles E.leis erson Ronald L.Rivest Clifoord S tein Introduction to Algorithms(Second Edition), China Machine Press","link":"/2019/05/28/3_%E7%B4%A0%E6%95%B0%E5%88%A4%E6%96%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%85%B6%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"},{"title":"快速排序算法","text":"一、快速排序的思想 快速排序是生活中比较常用的一种排序算法，它的特点就像名字一样速度快、效率高。 快速排序采用的思想是分治思想，先简单的介绍一下分治的思想。分治算法的基本思想是将一个规模为 N的问题分解为 K 个规模较小的子问题，这些子问题相互独立且与原问题性质相同。 求出子问题的解，就可以得到原问题的解。下面这张图会说明分治算法是如何进行的：将 cn 分成了两个 cn/2，转而分成了 cn/4 cn/8……我们通过这样一层一层的求解小规模的子问题，将其合并之后就能求出原问题的解。 既然快速排序用到了分治思想，那么也就是说快速排序也就和分治算法一样为了进行排序需要先对其划分的子区间进行排序。 其基本思想就是：在待排序的序列中选取一个值作为一个基准值，按照这个基准值得大小将这个序列划分成两个子序列，基准值会在这两个子序列的中间，一边是比基准小的，另一边就是比基准大的。这样快速排序第一次排完，我们选取的这个基准值就会出现在它该出现的位置上。 这就是快速排序的单趟算法，也就是完成了一次快速排序。然后再对这两个子序列按照同样的方法进行排序，直到只剩下一个元素或者没有元素 的时候就停止，这时候所有的元素都出现在了该出现的位置上。 二、快速排序的单趟算法 目前关于快速排序的单趟算法，我所熟知的只有这三种方法：左右指针法、挖坑法、前后指针法。 1、左右指针法： 左右指针法实现思路：在一段区间内我们有一个值 key，从左边区间进行遍历，直到找到一个大于 key 的值就停下，然后再从右边找小于 key 的值，找到一个也停下来。我们将左右的值进行交换，这样左边那个大于 key 的值就被换到了右边，而右边那个比 key 小的值就被换到了左边。 当左右两个指针相遇的时候就说明所有元素都与 key 做过了比较。然后再将左指针所在的元素赋值给 key。此时按照上述方法进行递归实现 [left, key]和 [key+1, right]。 这个图对于单趟排序做了一个简单的说明 左右指针法代码如下： 2、挖坑法： 挖坑法的思想是类似于左右指针法的，思路是先将最右边的值保存下来，作为 key 值。 这时候最右边的值被取出去，最右边就相当于有了一个坑，我们从左向右进行遍历，找到一个比 key 大的数就把它填到这个坑里，这时候就相当于坑在左边，我们有从右向左进行遍历找比 key 小的数，找到后再次填到坑里。依次类推，大致的思想和上面的解法其实是很相似的。 挖坑法的代码如下： 3、前后指针法： 前后指针法的思路就是有两个指针，一个为 cur，另一个为 prev。开始的时候让 cur 指向 left，让 prev 指向 left 的前一个位置。让 cur 向后找比 key 小的值，找到之后就让如果此时 prev 与 cur 不相等就让 prev 与 cur 进行交换。 如果找不到比 key 小的值就一直让 cur 向后走，直到走到区间的最右边就停止，当 cur 走到边界的时候就让 cur 与 prev 进行交换。不断缩小边界，相同的方法进行遍历子区间。 前后指针法的代码： 三、快速排序的时间复杂度及其优化 通过上面讲解快速排序的单趟算法我们可以知道，快速排序是将一个问题转化为求解小区间来进行解决。 如果每次我们选的那个 key值刚好是整个区间序列的中间的那个位置，那么它分成的来那个过子区间就会相差不大，这时候我们我们可以把快速排序看成一颗二叉树。图如下： 我们可以看到如果选的 key 值的正确位置刚好在这个序列的中间，那么此时可以看成一个二叉树。 这个时候快速排序的时间复杂度是 O(n*lg n)。但是，如果这个 key值得正确位置是在这个区间的最边上，就是说我们选择的这个 key是最大值或者最小值，那么就会产生的一个子区间就是空的，这时候快速排序的时间复杂度就会达到 O(n*n)。 所以，我们需要的是时间复杂度小的快速排序，为此我们就要让快速排序选择的那个 key值都能恰好处在这个序列的中间。于是，我们以此思想来进行优化快速排序。 优化1 ：三数取中法 三数取中法就是我们取三个数中间的那个数，这样我们就能在给定的一段区间中找到那个每次出现在中间的那个数。代码如下： 优化2 ：小区间优化 当我们划分的子区间很小的时候（一般情况下13为判断的标准），我们使用快速排序对于这些小区间进行排序的时候，如果我们还使用快速排序的话就会得不偿失。 因为快速排序对子区间的划分就像二叉树一样，越到下面递归越深，那么还不如我们把这剩下的数取出来用其他的排序，这样的话也就提高快速排序的效率。具体代码如下： 在这里我给出直接插入排序的代码实现，大家可以看一下。关于直接插入排序我会在以后的博客中会讲的 四、关于快速排序的非递归实现 上面的快速排序使用递归来实现的，我们知道如果递归特别深的情况下就会不断的去创建函数的栈帧，增加了函数调用的开销就会影响函数的执行效率，那么这时采用非递归的快速排序就是非常有必要的。其实说到非递归，就非常简单了，直接使用前面学过的栈来进行实现。 非递归代码如下： 上面就是我关于快速排序的介绍，包括快速排序单趟的算法以及它的优化方法。 在快速排序中我们知道它的时间复杂度在 O(lgn）~O(n*n)，在经过我们的优化方法改善之后它的时间复杂度是接近 O(lgn) 的，相对于其他排序来说快速排序时间复杂度还是低的。 以上就是我关于快排的理解，若有问题请指出，谢谢。","link":"/2019/06/07/4_%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"},{"title":"Git配置SSH秘钥","text":"在 Git 中使用 SSH 协议访问 Github，使用 SSH 协议，您可以连接并验证远程服务器和服务。在每次访问时连接到 GitHub 而不提供用户名或密码。 第一步：检查是否存在SSH秘钥1$ ls -al ~/.ssh 如果显示 cannot access /root/.ssh: No such file or directory 表示目录不存在，ssh 不存在，如果存在也可以继续执行第二步。 第二步：生成 ssh-key 密钥对(包含：公钥、私钥)1$ ssh-keygen -t rsa -C &quot;25xxxxxx@qq.com&quot; 第一次是让你选择一个秘钥保存目录，回车即可，然后会让你输入两遍密码，可以输个自己容易记住的，也可以不输入直接一路回车到底，出现下面的情况就成功了。 第三步：添加 ssh-key 私钥到 sh-agent 本步骤 Windows 平台不需要操作 首先确保ssh-agent正常工作 1$ eval $(ssh-agent -s) 直接将私钥 id_rsa 添加到 ssh 代理中，跟windows不同的是不需要修改后缀为.ppk 123$ ssh-add ~/.ssh/id_rsaEnter passphrase for /root/.ssh/id_rsa: Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa) 第四步：将公钥 id_rsa.pub 添加到你的 github 或者 gitlab 等仓库中 打开公钥文件复制全文 1vim /root/.ssh/id_rsa.pub 使用邮箱登录仓库，点击用户头像，找到 Settings -&gt; SSH and GPG keys -&gt; New SSH key 将公钥（id_rsa.pub）文件中的乱码粘贴进去，起个容易识别的名字，如SSHKEY 第五步：配置成功如图 第六步：配置个人信息 如果配置了可以忽略 12$ git config --global user.email &quot;25XXXXXXX@qq.com&quot;$ git config --global user.name &quot;MOONEY&quot;","link":"/2019/07/01/6_Git%E9%85%8D%E7%BD%AESSH%E7%A7%98%E9%92%A5/"},{"title":"你真的会学习吗？","text":"📌阅读引导本文字数6800+ 据说坚持看完的人 外面看不到 📌正文开始未来学家库兹韦尔有一个特别有意思的概念，叫做「吓尿指数」，什么意思呢？ 就是把一个生活在若干年前的人带到我们现在的生活环境，他将被现在的交通、科技、生活状况给吓尿，那么这个「若干年」就是我们这个世纪的「吓尿指数」。 比如，将一万年前，刚刚会使用火的智人，带到1000年前的宋朝，他就会被那时候富丽堂皇的宫殿，绚丽夺目的服饰，人们生活所使用的各种器具给吓尿； 再比如，将200年前的嘉庆皇帝，带到如今的时代，他会被满街的汽车，天上的飞机，每个人手中的手机，甚至是机器人，VR，AR等各种高科技给吓尿…. 但是，他们为什么会吓尿呢？是因为看到太先进的科技，害怕了吗？ 你设想一下100年后的世界： 我们可能都活在一个虚拟世界里，每天在玩游戏； 我们和机器人共同生活，他们已长得和我们一样； 我们和机器人甚至结合在了一起，并且可以永生； 我们能轻易的进行太空旅行，生活在多个星球上； 我们把科幻电影里看到的场景，都搬到了现实中… 但，面对这样的场景，你真的会被吓尿吗？ 我看未必！ 你可能会说：哇，好腻害，和电影中的一样呢~ 可为什么说200年前的人，如果穿越到今天，肯定会被吓尿呢？ 那是因为他的知识结构，和眼前的这个世界，断层了！ 什么意思？刚才说的这些高科技，我们可能从未亲眼见过，只是电影里看到，或者是脑海里想象出来的，但是我们至少能理解他们。 无非就是人工智能更先进了，用上了更快的网络，万物互联了，虚拟世界和物理世界融合了，发现了新材料，航天技术得到了空前的发展… 而200年前的嘉庆皇帝，如果来到今天，他可能完全无法理解眼前的这个世界… 你告诉他这个叫手机，那个叫ipad，路上跑的叫汽车，手机里说话的那个女人叫Siri… 他完全无法理解，甚至都听不懂你说的普通话… 那怎么办呢？有什么办法可以让嘉庆皇帝他老人家，学习、理解我们这个世界呢？ 为了回答这个问题，我们先来看一下「学习」这个过程，到底是如何完成的？ 📌学习是如何完成的？比如你看了一篇文章，读了一本书，听了一场讲座，你感觉收获很大；或者你通过不断练习学会了游泳… 这份感受与收获，以及学会的游泳姿势，到底在你的大脑里到底发生了什么变化？ 是多出来一些细胞吗？还是细胞的样子发生了改变？ 如果都没变化，那这些新的知识和技能，是如何储存在你大脑中的呢？ 著名心理学家巴甫洛夫，曾经用狗狗做了一个实验，来研究这个学习的过程： 饲养员每次给小狗送食物的时候，小狗都会流口水，这个当然并不奇怪。但是时间一长，当饲养员刚打开门，还没有进来，狗粮还没有出现的时候，小狗就已经开始流口水了… 这就有点奇怪了，「开门」和「狗粮」这两个完全不相关的事物，为什么让小狗产生了同样的反应？ 巴甫洛夫就猜想，是不是因为「狗粮、开门、饲养员」这几件事总是同时出现，慢慢的，小狗就将他们联系到了一起，当「开门」这个事件发生，小狗就认为「狗粮」马上就要出现？这不就是学习吗？ 于是，为了进一步验证这个猜想，巴甫洛夫开始测试其他的方式，分别使用铃铛、口哨、音乐、一句特定的话等和「狗粮」一起出现… 结果，这些都能让这这只可怜的小狗开始分泌唾液…这证明小狗确实会学习！ 这个「巴甫洛夫的狗」的著名实验，似乎触及到了学习的本质：所谓学习，就是把原本不相关的东西联系在一起的过程。 这个说法有科学依据吗？学习在大脑中又是如何发生的呢？几十年后，心理学家赫布，提出了解释该现象的理论模型：如果大脑里两个神经细胞总是被同时激发，那他们之间的连接就会变得更强。而这个时候，如果再激发其中一个细胞，那么另外一个细胞，就会被同时激发。 这个就是著名的「赫布定律」，他的这个猜想也在之后的科学实验中被证实。 可能这样说，你还是不太能理解，这就像2个素不相识的男女，在公司活动中经常被安排在一起做活动，他们两人之间的连接就会被加强，然后成为朋友，甚至产生爱慕，最终走到一起。 所以，学习的过程，并不是我们通常认为的，是将虚拟的知识存入到大脑里的这样一个过程。而是将不同事物彼此联系到一起，并在大脑中产生与之相对应的神经细胞之间的连接强度的变化。 比如，你眼前放了一个「纸袋」，今天是你第一次见到它，在没有其他人给你解释的情况下，请问你是如何理解它的？ 你大脑里会凭空冒出来一个概念叫做「纸袋」吗？ 不会。 我猜你理解它的过程大致是这样的： 看，我们理解一个新事物的过程，并不是凭空冒出来一个概念的，而是找到已有的相关概念，并把它们连接起来，组合成一个新概念。 如果我们把这个过程再往下推，看看是不是这样的： 同样的，你还可以试试其他事物，回忆一下，你学会它的过程是不是也发生了类似的连接？ 学习的过程，其实就是建立新连接的过程。可以连接已有的概念，也可以连接你看到的、听到的、闻到的某个信息。 我们经常说某个人口才好，能把一个复杂的概念讲明白，那一定是因为这个人用了一个你熟悉的概念作为起点，帮助你连接到这个新概念上，这样你就能一下子听明白了。 我们回到开头说的问题，为什么会有吓尿指数？ 200年前的嘉庆皇帝来到今天这个社会，为什么会被吓尿呢？ 你把一个iPhone手机放在他的面前，他会怎么理解它？ 玻璃？瓷器？铁器？铜器？画？西洋文？ 这个画怎么会自己动呢？谁在讲话？ 匪夷所思… 他已经找不到该用什么「原有知识」来理解它了！ 并不仅仅是我们现在的科技进步了，而是我们现在用的产品，所使用的「技术要素」已经完全脱离了他当时的知识存量，知识结构发生了断层，导致他找不到可连接的点，现实变成了他不能理解的梦境空间… 人是在已有认知上，建立新的连接，来理解新事物的。 如果缺少了相关的背景知识就无法理解眼前这件事。反过来说，如果你的知识存量越多，你能理解的新知识也就越多，理解速度会越快，这就是我们看书会越看越快的原因。 我们在上节课留了一个尾巴，就是学习的第三步「提取使用」没有讲。结尾的时候我说：如果知识没有「用」，就「没有用」，其实说起来，这是一句正确的废话，因为这个道理大家都懂。 可关键是，我们为什么会「不用」？ 这不是很奇怪嘛！ 如果将来不会用，我们干嘛要学习？ 我们辛辛苦苦学知识，是为了显得自己很有学问吗？ 还是显得自己很努力？很爱学习？ 都不是吧！ 为了通过考试？ 确实，国人很多小伙伴都是因此而学习的，比如有些同学高考结束后，就把书给扔了、烧了… 为什么会这样？因为他们都把学习当成了「目的」本身。 高考结束，大学毕业，或者考证通过，就是这个目的的「终点」，一旦跨过终点，我为什么还要学习？考完之后，我为什么还要用这些知识？ 目的已经达到啦，书和知识当然可以扔了啊！ 很多时候，我们很多人，都在为了学习而学习，为了考试而学习，全然忘记了学习的真正目的！ 学了不用，是因为把学习的目的搞错了！ 那学习的真正目的是什么？学习知识，是为了能更高效的解决问题！ 目标错了，姿势怎么可能正确？ 就像基于「地心说」发展出来的任何理论，都不可能正确！ 如果目标变成了「解决问题」，那么「学习」就变成了过程，「知识」就变成了解决问题的「要素」。 那么，只要你在生活、工作中依然需要面对问题，学习就不会停止！只要问题需要被解决，你为此学到的知识，就一定会被使用！ 这就是我们常听到的「带着问题去学习」，这句话竟然还被当成了金玉良言，这不应该是理所当然的嘛！不带着问题去学习才是「动机不纯」嘞！ 那我们该如何「使用知识」来「解决问题」呢？比如，问题：7×8=？ 你会如何解决这个问题？ 摆一个7行8列的点阵，然后数一下有几个点？ 哪怕你用的是这种方式，还得有个前提： 就是你得看得懂「7、8」这两个数字； 得看得懂「×」这个符号代表什么意思； 还得知道用「行、列」组成的点阵来解决乘法的问题； 这些数字、符号代表的意思，就是「知识」，没有这些知识，你连题目都看不懂… 当然，如果你在小学背过「乘法口诀表」，你根本不需要搞这个点阵图，直接可以写出答案：56。 这个「乘法口诀表」就是知识。 刚才这个过程，就是解决这个问题的「思考过程」，我们发现，拥有不同「背景知识」的人，思考这个问题的过程和方法、速度是不一样的： 看不懂数字和符号的人：一脸懵逼； 看得懂数字和符号，但是不会乘法口诀的人：列出点阵图，一个个数； 会乘法口诀表的人：瞬间给出答案！ 所以，知识是如何帮助你解决问题的？ 「知识」并不是直接解决问题的，而是提高了你解决这个问题的「思考质量」！ 这样，一个清晰地脉络就浮现在我们眼前： 所以，学习的真正目的，是为了提高「思考质量」！ 这是一个非常重要的转变！ 什么意思？原来，学习是你的目标，现在目标变成了「如何提高思考质量」，「学习知识」变成了达成这个目标的一个关键步骤！ 目标不同，姿势当然就会有变化！ 那么，我们应该如何通过学习，提高思考质量呢？ 首先，你得先了解一下，「思考」到底是一个怎么样的过程.. 📌思考是怎么回事？我们回到前面「7×8=？」这个问题，你再回忆一下，刚才你是如何思考的？ 1. 看不懂，一脸懵 2. 看懂了，列成点阵图，然后一个个数 3. 「背」答案 这答案是计算出来的吗？不是！ 是在记忆中找到的！ 我们再来看一个问题：问题：我产品做出来了，该如何做宣传？ 思考1：背景知识中，没有「宣传」这个概念… 思考2：冒出很多相关信息… 一想到宣传，脑子里就蹦出非常多成功案例： 朋友圈做微商吧，宣传效果好，我一个朋友现在辞职干这个，一个月几万块洒洒水… 做淘宝直通车吧，虽然费用不小，但是流量稳定啊，有人就靠直通车，一个月赚几十万呢… 开微信公众号吧，先发发文章，等粉丝有了，想宣传什么宣传什么，有人用公众号月入100万… 做抖音短视频吧，最近可火了，当下风口，流量超多，有人用这个方式赚大钱了，这就是10年前的淘宝啊… …. 思考3：拥有一个有关宣传的「方法论」 产品做宣传，可以从3个方面来考虑： 营销文案：投放渠道之前，你应该先把时间花在设计一个好文案上，它是你推广的核心，营销文案没写好，投再多广告都是打水漂； 选择适合自己的宣传渠道：宣传渠道有三类：付费媒体、自有媒体、赢得媒体，分别适用于土豪；网红和爆款产品，我们的产品体验非常棒，应该将投入重点放在赢得媒体，在产品中嵌入传播点，让朋友圈为我们刷屏！再拨一点预算，适当的投放一些付费媒体，提升短时间内的用户触达率； 计算流量成本：先小范围测试投放渠道，每日紧盯转化率、分享率等等数据，计算流量成本，找到更优质的投放渠道，加大投放力度….. 基于这些概念和方法论，可以展开一整套解决方案，这里就不做赘述了…（Enmmm…. 如果你没有相关的背景知识，可能这段方案，你并看不懂…） 这个方案，是思考得来的吗？ 不是！ 也是在记忆中找到的！ 我们来看一下刚才的这些思考，具体经历了哪些步骤：1. 连接相关背景知识 我们首先会根据问题，在自己的知识库中搜索相关的背景知识，可以是概念，方法论，或者别人的经验，或者自己的所见所闻的信息，也可以是其他行业的知识… 总之，在这个过程中，大脑中会冒出很多与问题相关的各种信息。 如果能连接到的背景信息很少，我们就无法有效的思考，甚至都不能理解题目的意思… 而你掌握的背景知识越多，可用于思考的要素就越多，最终给出的方案也会越全面。当别人还在理解问题的时候，你可能已经连接到一个方法论，并开始侃侃而谈了… 2. 梳理这些背景知识 想到的这些背景知识可能会很零碎，你需要结合问题，把他们重新排列组合一下，梳理成一条完整的信息，形成最终的结论。 这个梳理的过程包括筛选、整理、重组、缩放等等… 不管怎么样，这个结论都是基于你掌握的背景知识，重新组合起来的新应用，而不是凭空产生出来的空中楼阁。 人类的思考过程，看似无法捉摸，深入剖析，其实就这2步： 连接-背景知识 梳理-背景知识 你说不对啊，还有想象力啊，我们可以想想并不存在的东西。 真的是完全不存在吗？ 我们所有的想象，都是基于已有知识的重新排列组合，或者某个特性的放大或缩小，比如： 狮身人面像，就是将人头和狮身重新组合在一起； 蜘蛛人，就是把蜘蛛的特性和人组合在一起，并放大了能力… 组合的要素，放大的基础，都是我们已有的认知。 太阳底下没有新鲜事，排列组合就是创新！ 我们并不能想像一个完全脱离于自有认知的东西，就像200年前的康熙帝，不可能在200年前想象出iphone这么个玩意儿。 因此，当你拥有不同知识背景的时候，你的思考过程和结果，也会截然不同。 当别人还在思考问题中的名词是什么含义时，你已经开始给建议了； 当别人还在零碎的给建议时，你已经可以把完整方案抛出… 所以，思考的过程，有点像玩乐高积木，决定你思考质量的，一个是你拥有的积木数量和种类，一个是你拼接的技巧和创意。 📌我们该如何提思考能力？知道了我们的大脑是如何思考问题的，要提高思考能力就有了具体的方向： 1. 增加背景知识量思考的基础是背景知识拥有量。 增加背景知识量，就是增加乐高积木里的积木数量和种类。 看似我们是在思考问题，其实大部分时间，我们是在回忆。 当你的大脑里没什么可连接的时候，大脑就会呈现出一片空白；你甚至连问题都看不懂，更谈不上思考了。 就像我让你用乐高积木拼出一个房子，可是你手上连一块积木都没有，你当然什么也搭不出来。而如果你掌握的背景知识量太少，你的思考就会比较片面，以偏概全；或者所有问题，都连接到一个方法论，比如用供需理论解释一切，这就像拿着一把锤子，眼里都是钉子… 所以，提高思考能力的第一步，并不是让大脑变得更聪明，而是增加自己的知识量。这并不是为了让你显得更有学问，而是帮助你在面对问题的时候，有足够的背景知识量可供你连接，让你拥有思考的「基石」。 2. 提高连接强度连接强度，就是指熟悉程度，就像我让你用乐高积木搭出一个房子，你能瞬间想到需要用到哪些积木，而不需要在一大堆积木里，一个个比对，一次次尝试… 为什么有些专家，当你的问题刚抛出，他的答案也几乎可以马上脱口而出？ 是他拥有一颗超级大脑吗？还是思考速度能快出天际？ 并不是！ 而是你的问题所需要用到的这些背景知识，对于他来说，已经成为了条件反射级的连接强度。 他需要做的只有一件事：根据你的问题，把瞬间出现在脑海中的解决方案说出来而已，根本用不到思考… 你无法那么迅速的找到相关的背景知识，当然也可以在自己的笔记本里查阅，通过搜索引擎寻找，但是那样效率太低，你资料还没收集齐全，对方已经开始执行方案了…. 那我们该如何提高与背景知识的连接强度呢？ 第一步：建立初次连接 学习的过程是连接，而不是记忆。 所以你每次学习了一个新概念、新方法，并不是把他背出来，或者存入收藏夹，而是让它和你的旧知识发生连接，用旧的知识来理解这个新概念，让这个新概念从你的原有知识里长出来。 比如，今天你学习了「背景知识」和「思考区域」这两个新概念，它们是什么意思呢？ 不要死记硬背定义，那样很快就会忘记，因为没有发生连接，我们可以用我们熟悉的其他知识来理解它，比如电脑里的硬盘和内存： 「背景知识」就相当于电脑中「硬盘」里储存的信息，平时一般不用，等有个程序需要用到这个信息的时候，这个信息就会从「硬盘」进入到「内存」里进行工作，这个内存就是「思考区域」 你看，像这样，将两个原来并不相关的知识连接一下，是不是印象更深刻，也更容易理解了？ 第二步：重复，再重复，形成条件反射级的连接 还记得开头我们讲的「巴甫洛夫的狗」的实验吗？ 狗狗听见铃铛就流口水，并不是马上就能学会的，而是要铃铛和狗粮同时出现的成百上千次后，他们两者之前的连接才会被逐渐增强，最终变成了条件反射。 知识也是一样，经常用到某个知识，就会切实改变大脑中神经细胞彼此的连接强度，当强度到达一定程度后，就会呈现出条件反射级的连接。 比如运动员，刻意训练某个动作，强化到一定程度，做动作就不需要再经过大脑。 比如说开车，向右转弯，要先打右转向灯，同时松离合，换挡，方向盘往右打，踩油门…如果你还在这样心里默念，那么你还在考驾照，如果你是个老司机，这个过程是不需要思考的。 3. 增强知识的结构性关于结构化知识的好处上节课我们已经讲过，对于思考能力的提升，结构化的知识还有一个好处，就是当你联想到某个背景知识的时候，不是一个个想到的，而是一整片一整片，可以一次性拿到一串背景知识，甚至是一整套完整的方案，大大提高了你的思考效率。 比如：产品卖不出去怎么办？ 别人能连接到的背景知识是：激励销售员、降价促销、增加广告投放渠道…等等这些零碎的点； 而你就可以直接连接到「企业能量模型」这个结构化的知识，然后分别从「产品、营销、渠道」这三个方向，九个常用解决方案里挑选几个适合的，几乎在瞬间给出一套完整的优化方案… 这就像让你用乐高积木搭房子，你不需要一个个寻找积木，再拼接他们了，直接就拿出一个拼好了的房子，简单调整一下即可… 4. 提高对背景知识的梳理能力有了这些背景知识，那么我们该如何做筛选、整理、重组、缩放等操作呢？ 我们还是参考如何玩乐高积木（你看，我总是用乐高积木的案例，就是用熟悉的认知来理解新事物的方法，这样方便你理解和加深印象） 第一种方式：随意搭配 就是拿着这些积木，随意排列组合，没有什么规则，根据自己的喜好，想怎么搭就怎么搭。就像你面对问题，冒出了很多背景知识，你把他们随意的组合，就能产生一些不错的想法和建议。 这种方式往往可以用于创新，就是尝试把原本并不相关的几样东西，结合在一起，看看能不能组合出新的样貌，探索一些新的可能性，结果常常会出人意料。 第二种方式：按套路搭配 就是你搭建的目标，是有一定规则和秩序的，比如你想搭一个房子，想搭一辆小汽车，在说明书上是有说明的，用哪几种积木，分别用多少，步骤是如何的，都写的很清楚，你按规定的步骤，一步步组合相关的积木，最终就能出现想要的房子、车子等。 在我们思考方法中，也有组合这些背景知识的各种套路说明书，比如： 整理背景知识的：MECE法则； 提升沟通效果的：SCQA结构化表达； 用于策略选择的：SWOT分析； 用于创新思考的：加减乘除排列组合； …. 这些都是已经成型的「思考说明书」，面对特定的问题，使用特定的步骤，重新组合背景知识，就能得到你想要的思考结果。 当你能够熟练的运用多种套路，并且熟悉每块积木的使用范围，那么下一步，你就能站在这些巨人的肩膀上，开始更有章法的创新，探索新的可能，设计出自己的艺术作品了。 对了，在梳理这些背景知识的时候，你还可以借助一些脑图工具： 比如Xmind，这能将你整理这些背景知识的过程可视化，提高你整理思维的效率。 变聪明，并没有想象中那么难 所以，你看，如果你想提高自己的思考能力，想让自己变得更聪明一些，这其实并没有想象的那么难，你原来只是找不到提高的路径而已。 当你遇到问题没思路，大脑一片空白，不是因为你笨，只是因为你平时太懒了，没有足够的知识存量；学了许多知识却没有用，并不是因为知识对你没帮助，而是因为你只顾着记忆忘记连接了，没有连接，学习就不曾发生；没有连接，你的思考也无从开始。 当你有了足够的背景知识量，你与他们之间也能拥有了条件反射级的连接强度，那么在思考具体问题的时候，你已经比别人快出了一大截，别人还没理解的时候，你就已经开始梳理答案了… 那么，在梳理答案的过程中，又有哪些「思考说明书」可以帮助你提高思考效率的呢？ 这个我们之后的课程再慢慢讲！ 📌转载说明：本文内容转载自知乎大V @谢春霖 – 如何提高思考能力？ @谢春霖www.zhihu.com/people/xiechunlin0210/activities 据说坚持看完的人，就会获得原文章的地址：原文地址 如果喜欢，请点赞或打赏。 点赞，让更多的人也能看到这篇内容，去原文地址点赞（收藏不点赞，都是耍流氓 -_-） 谢谢你的支持！","link":"/2019/05/02/2_%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E6%80%9D%E8%80%83%E8%83%BD%E5%8A%9B/"},{"title":"富人越富的时代，普通人如何逆袭？","text":"📌阅读引导本文字数5500+ 据说坚持看完的人 外面看不到 📌正文开始有一部纪录片叫做《人生七年》，导演是迈克尔·艾普特。纪录片拍摄于1964年，至今已经有50多年了。拍摄的内容是记录14个孩子，从他们7岁的时候开始，每隔七年就采访他们一次，采访内容是去了解他们这7年的生活变化。 这14个孩子出生于不同的家庭环境，有些是上流社会的精英家庭，有些则是普通的中产家庭，还有些是来自于社会底层的家庭，甚至是孤儿院。 整部纪录片想通过这种方式，试图去回答一个问题：“你的出身阶层能不能决定未来？富人的孩子是否还是富人？穷人的孩子是否依旧是穷人？我们的社会阶级是否真的已经固化？” 你猜结果是什么？先留个悬念，你可以暂时带着这个问题和自己的猜想继续往下看另外一个案例。 📌什么决定未来这个也是我最近在网上看到的有人对「阶级固化」做的一个非常有意思的财富分配模拟实验。实验是这样的：（实验数据来自于：城市数据团） 房间里有100人，每人都有100元，他们在玩一个游戏，每轮游戏每个人都要拿出一块钱随机给到另一人。 请问，最后这100个人的财富分布是怎样的？以下是三个不同的答案，请你猜猜会是哪个？ 你可以把这场游戏看做是真实世界财富分配的简化模型，假设每个人是从18岁开始进入这个游戏的，每天玩一次，一直玩到65岁退休。每次拿出一块钱可以视作是日常消费；而获得一块钱的人，可以视作是提供了一次服务而获得的报酬。 完全随机是为了让游戏公平，每个人都可以提供同样的服务，获得同样的收入，以此来验证我们的假设。 从18岁到65岁，差不多是17000多天，所以，我们的模拟游戏执行17000次，过程中允许负债，也就是说，如果你没钱了可以问其他人借钱，我们来看看结果会如何： 说明：横轴代表财富的排名，越往右侧财富越多；纵轴代表财富的数值 刚开始的时候，大家的财富都是一样的，但是随着时间的推移，差不多在相当于人30岁的时候，数据开始逐渐拉开，并且越拉越大，最终财富的分配接近于情况C，也就是幂律分布，结果如下： 前10%的人掌握着三分之一的财富，前20%的人掌握着超过半数的财富； 最富有的人的财富为400元左右，是初始值的4倍； 而大约四分之一的人背负债务，最多为负债200元… 这意味着什么呢？ 意味着在最公平的环境下，哪怕财富的分配方式完全随机，最终的结果也会是少部分富人掌握社会的大部分财富。而如果是在现实生活中，由于富人掌握的资源更多，他们获得财富的概率也会比穷人变得更高，因此，这个数值的差距会变得更加明显… 好，我们再来做一次实验，看看如果其中有一群人是富人的孩子，他们的起点设置的比普通人更高，结果会是如何？ 富人还会是富人吗？我们假设这100人中有10人是富二代，他们的初始值从100元调整为500元，其他人保持不变，游戏运行结果如下： 注：其中红色为富二代玩家 图形结果和前面一致，富二代中除了有个败家子跑到了社会中层（财富值依然超过普通人的初始值），其余的都依然在上流社会。 而财富总值的前六名全是富二代，前10大富豪中富二代也占了7名… 富人依然还是富人… 回到我们开篇《人生七年》的话题，最终这14位小孩，经过50年后，他们各自变得怎么样了？ 你猜的没错，和这个模拟游戏结果几乎一致： 那些上流社会精英家庭的孩子… 他们拥有更好的教育，毕业后从事着更高级的工作，拥有更高的社会地位，现在依然在上流社会过着优越的生活。 那些中产阶层的孩子… 多数则延续着他们父辈简单而平凡生活，从事着教育或公益的工作。 而来自底层的那些孩子… 他们辍学、早恋、早婚、早育…如今几乎都从事着各种低端的工作，比如保安、修理工、清洁工等…而更可怕的是，他们的孩子也同样因为从小无法获得良好的教育，而重复循环着他们父辈的生活轨迹… 富人的孩子还是富人，穷人的孩子还是穷人… 这个社会似乎真的已经阶层固化！ 但，其中有一位叫尼克的孩子，他从一个偏远地区只有一间屋子的小学，通过自己的努力，最终考上了牛津，后来去美国当了物理教授，虽然没有变的非常富有，但已突破了阶层的壁垒。 命运之手似乎也有漏网之鱼？他是如何做到屌丝逆袭的？ 我们中的绝大多数人，其实都和尼克一样，没有腰缠万贯的亲爹，没有一飞冲天的运气，我们都只是普普通通的一群人。想要改变命运，我们能怎么办呢？ 📌跳出命运之轮回到那个数学模型… 现在我们再次假设100个玩家每人初始值为100元。但这次，我们设定有10人比别人更加努力，从而获得了1%的竞争优势，从数据上来看，就是随机获得财富的概率提高1%，那么结果会如何呢？ 注：红色为更努力的玩家 虽然最终的趋势图依然没有变化，但这10位更努力的玩家，竟然有9人都进入了前20！ 这意味着什么？意味着你只要比别人多努力一些，也许，你就能拼搏出一个绝地反击的故事！ 感谢这个残酷世界还给我们留下一条生路… 所以，我们该如何面对这个残酷的世界？答案是两个字：努力 好吧，写到这里，已经完全是一篇鸡汤文了。 但，你真的以为我今天想说的是“努力”吗？ 其实不是，努力并不是重点，而且要做到努力也不难，谁没努力过呢？可为什么还是有那么多人离成功如此遥远呢？ 因为，真正难做到的不是“努力”，而是“坚持”！ 如何学会坚持？刚才的模拟游戏，把“努力”的因素加入之后得到了“屌丝逆袭”的结果，但其中是有一个特别大的隐含前提的： 就是这个人从18岁开始到结束，必须每一天都比别人更努力，而不是1天、1个月、1年….是每一天！ 这才是“屌丝逆袭”真正困难的地方！ 从小我们看过很多励志的电影，剧情大多是一个贫困家庭出生的孩子，通过自己的努力，最终获得了财富与荣耀故事：比如《当幸福来敲门》、《三傻大闹宝莱坞》还有在中国曾经挺火的一部电视剧《奋斗》.. 为什么屌丝逆袭的故事经常用来拍成电影？因为太少了嘛。 为什么太少了？ 因为这条路太难了，很多人坚持不下去，就放弃了！ 这才是真正可怕的地方！ 我们并不是没有梦想，更不是没有努力过，而是未曾坚持下去！ 所有的成功学都在教导我们应该努力，却从来没有告诉我们该如何“坚持”。 而今天，我真正想给你讲的，就是我们该如何学会“坚持”！ 那我们应该如何让自己持续“坚持”努力呢？靠意志力硬抗吗？ 还是去爬个雪山，走个戈壁？ 或者是要天天打鸡血、日日喝鸡汤？ 还是把坚持写上100遍，贴满整个屋子？ 都不是… 答案是： 不坚持！ 任何需要靠”坚持”的事，往往都坚持不了多久。 而你每天乐此不疲，废寝忘食在做的事，你的大脑里根本就不会跳出“坚持”两字… 比如喜欢玩游戏的人，他会说需要凭意志力坚持才能接着玩下去吗？不会！ 只要开始了，就根本停不下来，反而是想停下来才需要坚强的意志力呢！玩上瘾了，你抢都抢不走！ 你正在坚持的，说明这件事你内心就根本不喜欢。既然不喜欢，你又为什么要期待有一天你能在这条路上获得成功？ 那些你不需要坚持的事，才是你正在“坚持”的事。 我们要做的事情，不是把不喜欢的事坚持做下去，而是去找到自己真正喜欢的事，然后一生都为它乐此不疲！让自己“玩上瘾”！ ok，那么问题来了，如何找到自己真正喜欢的，还有机会让自己成功的事呢？ 总不能天天玩游戏吧？（当然，这个时代，如果你发自内心的热爱玩游戏，并确实很有天赋，你一样也能获得成功，很多职业玩家收入不比大公司的CEO们少） 📌尝试改变自己第一：找到自己的天赋我们从小就一直被教导说，从哪里跌倒就要从哪里爬起来；你数学不错，但是英语太差，你要补习你的英语；你挺有自我主见的，想法也很独特，但是太自我，要收着点性子，多与人和睦相处…. 因此，我们磨平棱角，补齐短板，收起天性….终于，我们变成了一位….普通人。 一个人只能从优秀走向更优秀！ 我们来看一个著名的实验： 为了提高教授快速阅读的方法，美国一所大学曾做了一个为期3年的研究：研究人员对10000名读者的阅读速度和理解能力进行了测试： 在没有培训之前，一般读者每分钟读90个字左右，而有些优秀的读者每分钟可以读350个字左右。 然后，对所有人都进行了快速阅读方法的培训之后，一般读者增加到了150字左右，增加了近2倍。但是你猜之前的那些每分钟可以读350字的人增加到了多少？ 答案是：每分钟2900字左右，增加了近10倍！ 这个结果让所有的研究人员都非常吃惊，因为一开始几乎所有人都认定，水平比较差的读者进步会更大。 所以，在你有天赋的领域持续投入，回报率才是最大的！ 那我们应该如何发现自己优秀的地方，或者说有天赋的地方呢？ 我们一般认为的天赋是显性天赋，比如长得漂亮、身体协调、唱歌好听、智商高… 其实还有一种天赋，是隐性天赋。你会对某些东西感到愉悦，这个东西持续给你满足感，你可以一直花时间在这里，不厌其烦。时间久了，其实你就会与众不同。 我们都知道1万小时天才理论，可一个人为什么会在一件事上花一万小时呢？靠坚持吗？ 有些人是不得已。但是多半人，是在深入体验中，找到了满足感，找到了自我存在的价值。只有持续的满足和愉悦感，才能让一个人“一不小心”就上了瘾，“一不小心”就投入了一万小时，“一不小心”就成为了高手，而不是所谓的坚持。 别人以为他在艰苦奋斗，实际他是乐在其中。 为什么让你照着PPT练习2次，你就很痛苦；而乔布斯为了苹果大会练习100次，却依然乐此不疲？ 为什么同一个点上，有人痛苦，有人愉悦？ 你搜索一下自己的过去，看看有没有一些事，是你愿意不厌其烦的一直做下去的？有没有什么事你做不到完美，你就无法忍受的？比如一个图标改来改去改100遍？ 这些让你不厌其烦的地方、追求完美的地方、无法忍受的地方就是你的天赋所在，这就是上帝留给你的人生密码。 第二：重新设计你的人生找到自己有天分的地方之后呢？ 写个ppt，做份简历，然后告诉别人，你在这块有天赋，这是你的兴趣爱好吗？ 不是，你需要开始围绕你自己的“天赋”和“优势”重新设计你的人生。 国内有个歌手叫：李健。 毕业于清华大学，算学霸级别的了吧？可他在班内真的算不上有学习天赋的，他的室友要不就是从小看黑格尔长大的，要不就是会六国语言的，要不就是获得各种奥林匹克金牌的….. 每次考试他都需要非常勤奋努力，才可以考到六七十分，而那些真正的学霸，轻轻松松98分、99分…. 相反，只要校园内有歌唱比赛，李健几乎每次都能轻轻松松的拿到第一…. 毕业的时候，他做了和大多数人一样的选择，去了对口的广电总局上班，还算不错的企业吧？可他却感觉，自己每天做着不喜欢的工作，用着自己不擅长的技能，在一个陌生的环境下听人使唤。虽然非常努力，却还是没能把事情做好，完全没有存在感….只能在下班后去KTV唱歌发泄… 直到几年后卢庚戌点醒他，邀他共同组建“水木年华”，这才有了我们后来熟知的中国著名歌手：李健！ 就像我们前面说过的，当你在有天赋的地方持续投入的话，回报效率是最高的。 所以，如果你发现了你的“天赋”，千万别再只把它当成“兴趣”，它可能就是你“人生的密码”，你需要围绕它，开始重新设计自己的人生。 那如何设计呢？可以分为四个步骤：1. 设定目标，并赋予伟大的意义 先设定“身份”，再赋予“使命”。 什么是身份？就是你想成为怎么样的一个人？ 比如你喜欢唱歌，你将来想成为“一名歌手”； 比如你喜欢画画，你将来想成为“一名画家”； 比如你从小是个孩子王，有领导天赋，你将来想成为“一名企业家”； 先定义好身份。这里需要注意的是别拿目标当技能，比如你喜欢赚钱，你将来想成为“一名有钱人”…这个没有意义，赚钱不是你的天赋，而是你发挥天赋后可能带来的结果。 然后再为这个“身份”赋予一定的“使命”。 什么是“使命”？就是“利他”。 你成为这个身份之后，能够给其他人带来什么好处？ 比如你想成为一名歌手，那是一名怎么样的歌手？你在为谁发声？你在为谁歌唱？你的歌声能够给别人带来力量？治愈？还是愉悦？ 比如你想成为一名画家，那是一名怎么样的画家？你打算主要画什么主题？为什么要画这个主题？你在传达一种什么精神？ 没有这些意义，你如何打动人心？ 没有这些意义，如何形成自己风格？ 没有这些意义，你的用户为什么需要你？ 用户不需要你，你如何商业化？ 2. 思考商业化，把天赋变成事业 如果是想重新设计自己的人生，那就不能只是把它当原来的兴趣一样玩玩就可以了，因为也许这个时候，你可能已经没有了其他的经济来源，你必须要思考如何商业化。 至于如何商业化，本专栏最后一个季度的全部内容都会围绕这点展开，如何从你的使命出发，理解你的用户，如何把你的想法落地，变成一个产品，如何构建自己的商业模式，如何搭建团队，如何赚钱… 这里就不详细讲了，讲了也没用，因为中间还有2道关卡你需要过，后面2个季度的课程我们都会讲到。 3. 刻意练习“套路”，完成一万小时的积累 有天赋当然不够，它只是告诉你，你在这里持续投入的话，会得到最高的回报率，但并没有说，你找到天赋，就不需要再投入了。 从一个有天赋的人进化到这个领域里的高手，你还差“套路”！ 什么是“套路”？就是前人总结的经验。 还是比如你喜欢唱歌，不是天天去KTV吼两嗓子，就能直接发唱片了，你需要专业化的训练，比如如何用气唱歌，练习音准，学习乐理知识，学习舞台表演….. 你所擅长的技能，在这个领域里一定已经有人总结了非常多成熟的“套路”供你学习，这些套路能够让你少走很多弯路，减少无用的练习，帮助你更加快速的达到专业水准 一万小时天才理论，刻意练习的是“套路”，而不是你的“兴趣”… 顶尖的高手，比如职业运动员，职业歌唱家，艺术家，企业家，都是在熟练掌握了套路之后，站在巨人的肩膀上，然后再往前迈出自己的一步！ 而这一步，是你的一小步，也许却能成为人类在这个领域里的一大步。 4. 设立一个个小目标，逐个完成它们！ 你要将这个新的人生目标，按时间和阶段拆分成一个个小目标。 除了因为那些：“罗马不是一天建成的”、“一口吃不成胖子”等烂大街的大道理之外，最主要的是，你得给自己在过程中，设立一个个“正反馈”。 什么叫“正反馈”，就是“经验值”。 如果玩过任何一款网络游戏的话，你就对这个概念很熟悉，你每杀掉一个怪，就会获得一些经验；你完成一个任务，也会获得一些经验；经验积累到一定程度之后，你就会升级；升级了你就会变得更强大，获得一些新的技能和新的能力；然后展开一段新的旅程，过程中还会给你一些意外的惊喜… 这个“经验”和“升级”就是你的“正反馈”，他是在告诉你，你目前做的这件事是正确的事，是有意义的事，并且会给你带来一些奖赏，持续的激励你不断的朝这条路继续前进。 这些稳定的获得感、成就感和不确定的意外惊喜叠加起来，就会让你“上瘾”。 而你在规划自己的人生道路上，就要为自己设置这些“上瘾”点，让自己乐在其中。 具体拆成多长的时间？多小的目标？ 没有标准，越多越好，让自己不断的达到这些小目标，并记录下达成的那些时刻，让你自己看到自己成长的进度条，激励自己持续前进，并在过程中遇到那些命中注定的“意外之喜”… 你只要追求卓越，成功便会自动找上门来！ 回到《人生七年》里那位逆袭的尼克：他真的是靠的“努力”完成的逆袭吗？ 不是。 真正的原因，是他从小对物理的狂热和对自己理想的坚持！ 他7岁那年，就梦想着要探索月亮的奥秘，进而推动着他更努力的学习物理；他在21岁那年考入牛津物理系； 后来，揣着推动核物理发展的梦想移民到美国…虽然他的天赋没有支撑他再更进一步，最终只成为了大学物理教授，但他已完成了阶层的穿越！ 再回到那个模拟财富计算：那个能贯穿人生的，能让你始终比别人多的1%的竞争优势，是“努力”吗？ 不是。 而是你在某个领域里的“天赋”！ 因为只有天赋，才能贯穿一生，而你要做的事，就是发现他，保护他，并不断加强他！ 用你的天赋，重新定义你的一生！ 我们下节课见~ 📌转载说明：本文内容转载自知乎大V @谢春霖 – 如何提高思考能力？ @谢春霖www.zhihu.com/people/xiechunlin0210/activities 据说坚持看完的人，就会获得原文章的地址：原文地址 如果喜欢，请点赞或打赏。 点赞，让更多的人也能看到这篇内容，去原文地址点赞（收藏不点赞，都是耍流氓 -_-） 谢谢你的支持！","link":"/2019/06/20/5_%E7%A4%BE%E4%BC%9A%E8%B4%A2%E5%AF%8C%E5%88%86%E9%85%8D/"},{"title":"Hexo + icarus 博客搭建（二）","text":"本文主要介绍 Hexo + icarus 主题自定义 首先自定义博客的头像及其角标信息，将自己做好的图片替换即可。 详细的配置文件如下，全部做了中文翻译，文件位置如图： _config.yml 配置文件_config.yml >folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/##################################################################################################################### Site信息# Site# 网站标题，此处配置会被_config.icarus.yml覆盖title: Zhang's Blog# 网站副标题subtitle: 'Blog'# 网站描述：比较重要，它主要用于 SEO，用来告诉搜索引擎关于站点的信息，在其中包含网站的关键词。description: 'IT'keywords:# 您的名字author: MooneyZW# 国际化参数，支持 en, zh-CN, zh-TW 等language: zh-CN# 网站时区。Hexo 默认使用您电脑的时区。时区列表。timezone: ''##################################################################################################################### URL信息# URL## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/'# 网址url: http://example.com#网址根目录root: /# 文章的永久链接格式permalink: :year/:month/:day/:title/# 永久链接中各部分的默认值permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks##################################################################################################################### 文件目录# Directory# 资源文件，用来存放内容，映射到根目录下的source，在其中的_posts存放*.md文件即可完成博客发布source_dir: source# 公共文件夹，生成的站点文件存放在这个地方public_dir: public# 标签文件夹tag_dir: tags# 归档文件夹archive_dir: archives# 分类文件夹category_dir: categories# include code文件夹code_dir: downloads/code# 国际化i18n文件夹i18n_dir: :lang# 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径，如果也有别的页面不需要渲染，直接在下方添加就可以了skip_render: - 404.html #将404.html加进去，【-】之后要有空格隔开##################################################################################################################### 编辑信息# Writing# 新文章的文件名称new_post_name: :title.md # File name of new posts# 预设布局default_layout: post# 把标题转换为 title casetitlecase: false # Transform title into titlecase# 在新标签中打开链接external_link: enable: true # Open external links in new tab field: site # Apply to the whole site exclude: ''# 把文件名称转换为 (1) 小写或 (2) 大写filename_case: 0# 显示草稿render_drafts: false# 启动 Asset 文件夹,asset是md文件链接图片时存放图片的默认文件夹# 需要 npm install hexo-asset-image --savepost_asset_folder: true# 把链接改为与根目录的相对位址relative_link: false# 显示未来的文章future: true# 代码块的设置highlight: enable: true line_number: true auto_detect: false tab_replace: '' wrap: true hljs: falseprismjs: enable: false preprocess: true line_number: true tab_replace: ''##################################################################################################################### 主页分页设置# Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 8 order_by: -date##################################################################################################################### # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:##################################################################################################################### # Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator: true##################################################################################################################### 时间与日期格式# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss## updated_option supports 'mtime', 'date', 'empty'updated_option: 'mtime'##################################################################################################################### 分页设置# Pagination## Set per_page to 0 to disable pagination# 每页显示的文章量 (0 = 关闭分页功能)per_page: 8# 分页目录pagination_dir: page##################################################################################################################### # Include / Exclude file(s)## include:/exclude: options only apply to the 'source/' folderinclude:exclude:ignore:##################################################################################################################### 主题配置# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icaruslive2d: enable: truefeed: enable: true type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: ' ' order_by: -date icon: icon.png autodiscovery: true template:##################################################################################################################### 部署配置# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: 'git' repo: github: git@github.com:local-host-8080/local-host-8080.github.io.git,master # coding: git@git.dev.tencent.com:localhost-8080/localhost-8080.git,master _config.icarus.yml 配置文件_config.icarus.yml >folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500##################################################################################################################### 配置文件版本# Version of the configuration file# 配置文件与优先级# 除了在_config.icarus.yml的默认主题配置文件外，Icarus也会从如下位置获取替代配置：# 位于_config.yml的站点配置文件# 位于_config.post.yml和_config.page.yml的布局配置文件# 文章/页面的front-matter# (已弃用) 位于themes/icarus/_config.yml的旧主题配置文件# (已弃用) 位于themes/icarus/_config.post.yml和themes/icarus/_config.page.yml的旧布局配置文件# 配置文件版本###### 这个版本号与主题版本号相关却不总是相同。 ###### Icarus使用此版本号来决定是否升级默认主题配置文件。 请不要自己更改这个版本号。version: 4.0.0##################################################################################################################### 主题变体# Icarus theme variant, can be &quot;default&quot; or &quot;cyberpunk&quot;# 主题变体###### 通过此设置为Icarus更换”皮肤“。 此设置目前支持”default“和”cyberpunk“两种值。variant: default##################################################################################################################### 站点logo# Path or URL to the website's logo# Logo图标###### 设置你站点的logo。 此logo会显示在导航栏和页脚。 ###### logo配置的值既可以是你的logo图片的路径或URL地址：###### 示例1 logo: /img/logo.svg###### 示例2 logo:###### ----------text: My Beautiful Sitelogo: /img/logo.svg##################################################################################################################### 站点Head# Page metadata configurations# Favicon###### 你可以在head配置中指定你的网站favicon的路径或URL地址。head: # URL or path to the website's icon favicon: /img/favicon.svg # Web application manifests configuration # https://developer.mozilla.org/en-US/docs/Web/Manifest # Web App Manifest # Icarus支持基本的PWAmanifest.json的生成与Meta标签。 ###### 要开启web app manifest，请再主题配置中使用如下的配置。 你也可以参考MDN来了解每个配置项的详情。 manifest: # Name of the web application (default to the site title) # Web应用的名称 (默认为站点标题) name: Icaurs - Hexo Theme name: Zhang's Blog # The displayed name of the web application # when there is not enough space to display full name # Web的显示名称 # 当没有空间显示全名时显示 short_name: Icarus short_name: Blog # The start URL of the web application # Web应用的初始URL start_url: https://ppoffice.github.io/ start_url: # The default theme color for the application # 应用的默认主题颜色 theme_color: &quot;#3273dc&quot; theme_color: # A placeholder background color for the application page to display # before its stylesheet is loaded # 在应用的样式表加载之前显示的应用页默认占位背景颜色 background_color: &quot;#3273dc&quot; background_color: # The preferred display mode for the website # 网站首选的展示模式 display: standalone display: standalone # Image files that can serve as application icons for different contexts # 在不同上下文下用作应用图标的图片文件 icons: - # The path to the image file # 图片文件的路径 src: icons/touch-icon-iphone.png src: '' # A string containing space-separated image dimensions # 空格分割的表示图标尺寸的字符串 sizes: 144x144 sizes: '' # A hint as to the media type of the image # 图片的媒体类型提示 (可选) type: image/png type: # Open Graph metadata # 你可以在head配置中设置Open Graph。 # 参考https://hexo.io/docs/helpers.html#open-graph # 你应该在配置文件中将绝大部分配置留空。 仅在需要的时候在文章的front-matter中为这些设置赋值。 open_graph: # Page title (og:title) (optional) # You should leave this blank for most of the time # 页面标题 (og:title) (可选) # 大部分情况下请留空 title: # Page type (og:type) (optional) # You should leave this blank for most of the time # 页面类型 (og:type) (可选) # 大部分情况下请留空 type: blog # Page URL (og:url) (optional) # You should leave this blank for most of the time # 页面URL地址 (og:url) (可选) # 大部分情况下请留空 url: # Page cover (og:image) (optional) # You should leave this blank for most of the time # 页面封面图 (og:image) (可选) # 大部分情况下请留空 image: # Site name (og:site_name) (optional) # You should leave this blank for most of the time # 站点名称 (og:site_name) (可选) # 大部分情况下请留空 site_name: # Page author (article:author) (optional) # You should leave this blank for most of the time # 页面作者 (article:author) (可选) # 大部分情况下请留空 author: # Page description (og:description) (optional) # You should leave this blank for most of the time # 页面描述 (og:description) (可选) # 大部分情况下请留空 description: # Twitter card type (twitter:card) # Twitter卡片类型 (twitter:card) twitter_card: # Twitter ID (twitter:creator) twitter_id: # Twitter Site (twitter:site) twitter_site: # Google+ profile link (deprecated) # Google+个人主页链接 (已弃用) google_plus: # Facebook admin ID fb_admins: # Facebook App ID fb_app_id: # Structured data of the page # https://developers.google.com/search/docs/guides/intro-structured-data # 你应该在配置文件中将绝大部分配置留空。 仅在需要的时候在文章的front-matter中为这些设置赋值。 structured_data: # Page title (optional) # You should leave this blank for most of the time # 页面标题 (可选) # 大部分情况下请留空 title: # Page description (optional) # You should leave this blank for most of the time # 页面描述 (可选) # 大部分情况下请留空 description: # Page URL (optional) # You should leave this blank for most of the time # 页面URL地址 (可选) # 大部分情况下请留空 url: # Page author (article:author) (optional) # You should leave this blank for most of the time # 页面作者 (article:author) (可选) # 大部分情况下请留空 author: # Page images (optional) # You should leave this blank for most of the time # 页面图片 (可选) # 大部分情况下请留空 image: # Additional HTML meta tags in an array # 页面元信息 ###### 你可以通过head部分的meta设置来向生成的HTML中添加自定义&lt;meta&gt;标签。 ###### 每一个meta标签应作为meta数组中的一个元素出现。 ###### meta设置每一个元素的值应为&lt;属性名&gt;=&lt;属性值&gt;的格式，其中属性名和属性值分别代表着&lt;meta&gt;标签的属性和值。 ###### 如果&lt;meta&gt;标签有多个属性和值，请使用;来分隔&lt;属性名&gt;=&lt;属性值&gt;。 meta: # Meta tag specified in &lt;attribute&gt;=&lt;value&gt; style # E.g., name=theme-color;content=#123456 =&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#123456&quot;&gt; - '' # URL or path to the website's RSS atom.xml # 你可以通过head部分的rss设置来添加RSS链接信息。rss: /path/to/atom.xml rss: ##################################################################################################################### 导航栏# Page top navigation bar configurations# 导航栏navbar: # Navigation menu items # 导航栏菜单项 menu: # Home: / # Archives: /archives # Categories: /categories # Tags: /tags # About: /about 主页: / 时间轴: /archives 分类: /categories 标签: /tags 关于我: /about # Links to be shown on the right of the navigation bar # 导航栏右侧的链接 ###### 你也可以使用FontAwesome图标来作为纯文字链接的替换，格式如下： ###### &lt;链接名&gt;: ###### icon: &lt;FontAwesome图标的class名&gt; ###### url: &lt;链接URL&gt; links: # 问题反馈: 'https://github.com/local-host-8080/' RSS: icon: fas fa-rss url: '/atom.xml'##################################################################################################################### 页脚# Page footer configurations# 页脚footer: # Links to be shown on the right of the footer section # footer部分定义了页脚右侧的链接。 链接的配置格式与navbar中links的配置格式完全一致。 links: CC BY-NC-SA 4.0: icon: - fab fa-creative-commons - fab fa-creative-commons-by - fab fa-creative-commons-nc - fab fa-creative-commons-sa url: 'https://creativecommons.org/licenses/by-nc-sa/4.0/' GitHub: icon: fab fa-github url: 'https://github.com/local-host-8080/'##################################################################################################################### 代码高亮# Article related configurations# 代码高亮### 如果你已在Hexo中启用了代码高亮功能，你可以通过article中的highlight设置来自定义代码块。 ###### 请从highlight.js/src/styles下列出的所有主题中 选择一个主题。 ###### 然后，复制文件名(不带.css后缀)到theme设置项中。### 如要隐藏复制代码按钮，将clipboard设置为false。 ###### 如果你希望折叠或展开所有代码块，将fold设置为&quot;folded&quot;或&quot;unfolded&quot;。 ###### 你也可以将fold设置为空来禁止代码块折叠。article: # Code highlight settings highlight: # Code highlight themes # 代码高亮主题 # 参考https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-light # Show copy code button # 显示复制代码按钮 clipboard: true # Default folding status of the code blocks. Can be &quot;&quot;, &quot;folded&quot;, &quot;unfolded&quot; # 代码块的默认折叠状态。可以是&quot;&quot;, &quot;folded&quot;, &quot;unfolded&quot; fold: unfolded # 此外，你可以在Markdown文件中使用下面的语法来折叠单独的代码块： ###### &lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;可选文件名 &gt;folded&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;###### ...代码块内容...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;###### &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt; # 封面 &amp;amp; 缩略图 ### 若要为文章添加封面图，请在文章的front-matter中添加cover选项： ###### 在post.md文件 ###### title: Icarus快速上手 ###### cover: /gallery/covers/cover.jpg ###### --- ###### Post content... ### 类似地，你也可以在文章的front-matter中为文章设置缩略图： ###### 在post.md文件 ###### title: Icarus快速上手 ###### thumbnail: /gallery/thumbnails/thumbnail.jpg ###### --- ###### Post content... ### 文章的缩略图会显示在归档页面和最新文章挂件中。 ###### 如果你在front-matter中使用的是图片的路径，你需要确保它是绝对或者相对于你的source目录的路径。 ###### 例如，为使用&amp;lt;your blog&amp;gt;/source/gallery/image.jpg作为缩略图， ###### 你需要在front-matter中使用/gallery/image.jpg作为图片路径。# Whether to show estimated article reading time# 文章阅读时间：你可以将article部分的readtime设置为true来显示文章字数统计以及预计阅读时间。readtime: true# Article licensing block# 文章许可协议###### 你可以在你的文章/页面的底部展示你的作品的使用许可，许可链接可以是文字或者图标。 ###### 这里的配置与导航栏或者页脚的links配置一致：licenses: 创意社区: icon: fab fa-creative-commons url: &amp;#39;https://creativecommons.org/&amp;#39; CC BY 4.0: icon: fab fa-creative-commons-by url: &amp;#39;https://creativecommons.org/licenses/by-nc-sa/4.0/&amp;#39; CC NC 4.0: icon: fab fa-creative-commons-nc url: &amp;#39;https://creativecommons.org/licenses/by-nc/4.0/&amp;#39; CC SA 4.0: icon: fab fa-creative-commons-sa url: &amp;#39;https://creativecommons.org/licenses/by-nc-sa/4.0/&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##################################################################################################################### 搜索&lt;/p&gt;&lt;h1 id=&quot;Search-plugin-configurations&quot;&gt;&lt;a href=&quot;#Search-plugin-configurations&quot; class=&quot;headerlink&quot; title=&quot;Search plugin configurations&quot;&gt;&lt;/a&gt;Search plugin configurations&lt;/h1&gt;&lt;h1 id=&quot;https-ppoffice-github-io-hexo-theme-icarus-categories-Plugins-Search&quot;&gt;&lt;a href=&quot;#https-ppoffice-github-io-hexo-theme-icarus-categories-Plugins-Search&quot; class=&quot;headerlink&quot; title=&quot;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Search/&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Search/&quot;&gt;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Search/&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;search:&lt;br&gt; type: insight&lt;/p&gt;&lt;p&gt;##################################################################################################################### 评论&lt;/p&gt;&lt;h1 id=&quot;Comment-plugin-configurations&quot;&gt;&lt;a href=&quot;#Comment-plugin-configurations&quot; class=&quot;headerlink&quot; title=&quot;Comment plugin configurations&quot;&gt;&lt;/a&gt;Comment plugin configurations&lt;/h1&gt;&lt;h1 id=&quot;https-ppoffice-github-io-hexo-theme-icarus-categories-Plugins-Comment&quot;&gt;&lt;a href=&quot;#https-ppoffice-github-io-hexo-theme-icarus-categories-Plugins-Comment&quot; class=&quot;headerlink&quot; title=&quot;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Comment/&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Comment/&quot;&gt;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Comment/&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;comment&quot;&gt;&lt;a href=&quot;#comment&quot; class=&quot;headerlink&quot; title=&quot;comment:&quot;&gt;&lt;/a&gt;comment:&lt;/h1&gt;&lt;h1 id=&quot;type-disqus&quot;&gt;&lt;a href=&quot;#type-disqus&quot; class=&quot;headerlink&quot; title=&quot;type: disqus&quot;&gt;&lt;/a&gt;type: disqus&lt;/h1&gt;&lt;h1 id=&quot;Disqus-shortname&quot;&gt;&lt;a href=&quot;#Disqus-shortname&quot; class=&quot;headerlink&quot; title=&quot;# Disqus shortname&quot;&gt;&lt;/a&gt;# Disqus shortname&lt;/h1&gt;&lt;h1 id=&quot;shortname-‘’&quot;&gt;&lt;a href=&quot;#shortname-‘’&quot; class=&quot;headerlink&quot; title=&quot;shortname: ‘’&quot;&gt;&lt;/a&gt;shortname: ‘’&lt;/h1&gt;&lt;p&gt;##################################################################################################################### 打赏&lt;/p&gt;&lt;h1 id=&quot;Donate-plugin-configurations&quot;&gt;&lt;a href=&quot;#Donate-plugin-configurations&quot; class=&quot;headerlink&quot; title=&quot;Donate plugin configurations&quot;&gt;&lt;/a&gt;Donate plugin configurations&lt;/h1&gt;&lt;h1 id=&quot;https-ppoffice-github-io-hexo-theme-icarus-categories-Plugins-Donation&quot;&gt;&lt;a href=&quot;#https-ppoffice-github-io-hexo-theme-icarus-categories-Plugins-Donation&quot; class=&quot;headerlink&quot; title=&quot;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Donation/&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Donation/&quot;&gt;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Donation/&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;donates:&lt;br&gt; # Alipay donate button configurations&lt;br&gt; # 登录支付宝并导出个人支付二维码图片。&lt;br&gt; # 将二维码图片保存到你的Hexo网站的附件文件夹下，或将它上传至图床。&lt;br&gt; # 向主题配置中添加如下配置：&lt;br&gt; -&lt;br&gt; type: alipay&lt;br&gt; # Alipay qrcode image URL&lt;br&gt; qrcode: ‘/img/alipayqrcode.png’&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# Wechat donate button configurations# 登录微信并导出个人支付二维码图片。# 将二维码图片保存到你的Hexo网站的附件文件夹下，或将它上传至图床。# 向主题配置中添加如下配置：- type: wechat # Wechat qrcode image URL qrcode: &amp;#39;/img/wechatqrcode.png&amp;#39;# &amp;quot;Afdian.net&amp;quot; donate button configurations# 爱发电# -# type: afdian# # URL to the &amp;quot;Afdian.net&amp;quot; personal page# url: &amp;#39;&amp;#39;# &amp;quot;Buy me a coffee&amp;quot; donate button configurations# -# type: buymeacoffee# # URL to the &amp;quot;Buy me a coffee&amp;quot; page# url: &amp;#39;&amp;#39;# Patreon donate button configurations# -# type: patreon# # URL to the Patreon page# url: &amp;#39;&amp;#39;# Paypal donate button configurations# -# type: paypal# # Paypal business ID or email address# business: &amp;#39;&amp;#39;# # Currency code# currency_code: USD&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##################################################################################################################### 分享&lt;/p&gt;&lt;h1 id=&quot;Share-plugin-configurations&quot;&gt;&lt;a href=&quot;#Share-plugin-configurations&quot; class=&quot;headerlink&quot; title=&quot;Share plugin configurations&quot;&gt;&lt;/a&gt;Share plugin configurations&lt;/h1&gt;&lt;h1 id=&quot;https-ppoffice-github-io-hexo-theme-icarus-categories-Plugins-Share&quot;&gt;&lt;a href=&quot;#https-ppoffice-github-io-hexo-theme-icarus-categories-Plugins-Share&quot; class=&quot;headerlink&quot; title=&quot;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Share/&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Share/&quot;&gt;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Share/&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;share&quot;&gt;&lt;a href=&quot;#share&quot; class=&quot;headerlink&quot; title=&quot;share:&quot;&gt;&lt;/a&gt;share:&lt;/h1&gt;&lt;h1 id=&quot;type-sharethis&quot;&gt;&lt;a href=&quot;#type-sharethis&quot; class=&quot;headerlink&quot; title=&quot;type: sharethis&quot;&gt;&lt;/a&gt;type: sharethis&lt;/h1&gt;&lt;h1 id=&quot;URL-to-the-ShareThis-share-plugin-script&quot;&gt;&lt;a href=&quot;#URL-to-the-ShareThis-share-plugin-script&quot; class=&quot;headerlink&quot; title=&quot;# URL to the ShareThis share plugin script&quot;&gt;&lt;/a&gt;# URL to the ShareThis share plugin script&lt;/h1&gt;&lt;h1 id=&quot;install-url-‘’&quot;&gt;&lt;a href=&quot;#install-url-‘’&quot; class=&quot;headerlink&quot; title=&quot;install_url: ‘’&quot;&gt;&lt;/a&gt;install_url: ‘’&lt;/h1&gt;&lt;p&gt;##################################################################################################################### 侧边栏滚动&lt;/p&gt;&lt;h1 id=&quot;Sidebar-configurations&quot;&gt;&lt;a href=&quot;#Sidebar-configurations&quot; class=&quot;headerlink&quot; title=&quot;Sidebar configurations.&quot;&gt;&lt;/a&gt;Sidebar configurations.&lt;/h1&gt;&lt;h1 id=&quot;Please-be-noted-that-a-sidebar-is-only-visible-when-it-has-at-least-one-widget&quot;&gt;&lt;a href=&quot;#Please-be-noted-that-a-sidebar-is-only-visible-when-it-has-at-least-one-widget&quot; class=&quot;headerlink&quot; title=&quot;Please be noted that a sidebar is only visible when it has at least one widget&quot;&gt;&lt;/a&gt;Please be noted that a sidebar is only visible when it has at least one widget&lt;/h1&gt;&lt;h1 id=&quot;侧边栏&quot;&gt;&lt;a href=&quot;#侧边栏&quot; class=&quot;headerlink&quot; title=&quot;侧边栏&quot;&gt;&lt;/a&gt;侧边栏&lt;/h1&gt;&lt;h6 id=&quot;设置sidebar中某个侧边栏的sticky为true来让它的位置固定而不跟随页面滚动。&quot;&gt;&lt;a href=&quot;#设置sidebar中某个侧边栏的sticky为true来让它的位置固定而不跟随页面滚动。&quot; class=&quot;headerlink&quot; title=&quot;设置sidebar中某个侧边栏的sticky为true来让它的位置固定而不跟随页面滚动。&quot;&gt;&lt;/a&gt;设置sidebar中某个侧边栏的sticky为true来让它的位置固定而不跟随页面滚动。&lt;/h6&gt;&lt;p&gt;sidebar:&lt;br&gt; # Left sidebar configurations&lt;br&gt; # 左侧边栏设置&lt;br&gt; left:&lt;br&gt; # Whether the sidebar sticks to the top when page scrolls&lt;br&gt; # 是否不随页面滚动&lt;br&gt; sticky: false&lt;br&gt; # Right sidebar configurations&lt;br&gt; # 右侧边栏设置&lt;br&gt; right:&lt;br&gt; # Whether the sidebar sticks to the top when page scrolls&lt;br&gt; # 是否不随页面滚动&lt;br&gt; sticky: false&lt;/p&gt;&lt;p&gt;##################################################################################################################### 布局配置 | 边栏小部件设置&lt;/p&gt;&lt;h1 id=&quot;Sidebar-widget-configurations&quot;&gt;&lt;a href=&quot;#Sidebar-widget-configurations&quot; class=&quot;headerlink&quot; title=&quot;Sidebar widget configurations&quot;&gt;&lt;/a&gt;Sidebar widget configurations&lt;/h1&gt;&lt;h1 id=&quot;http-ppoffice-github-io-hexo-theme-icarus-categories-Widgets&quot;&gt;&lt;a href=&quot;#http-ppoffice-github-io-hexo-theme-icarus-categories-Widgets&quot; class=&quot;headerlink&quot; title=&quot;http://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/&quot;&gt;http://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;布局配置文件&quot;&gt;&lt;a href=&quot;#布局配置文件&quot; class=&quot;headerlink&quot; title=&quot;布局配置文件&quot;&gt;&lt;/a&gt;布局配置文件&lt;/h1&gt;&lt;h6 id=&quot;布局配置文件遵循着与主题配置文件相同的格式和定义。&quot;&gt;&lt;a href=&quot;#布局配置文件遵循着与主题配置文件相同的格式和定义。&quot; class=&quot;headerlink&quot; title=&quot;布局配置文件遵循着与主题配置文件相同的格式和定义。&quot;&gt;&lt;/a&gt;布局配置文件遵循着与主题配置文件相同的格式和定义。&lt;/h6&gt;&lt;h6 id=&quot;config-post-yml中的配置对所有文章生效，而-config-page-yml中的配置对所有自定义页面生效。&quot;&gt;&lt;a href=&quot;#config-post-yml中的配置对所有文章生效，而-config-page-yml中的配置对所有自定义页面生效。&quot; class=&quot;headerlink&quot; title=&quot;_config.post.yml中的配置对所有文章生效，而_config.page.yml中的配置对所有自定义页面生效。&quot;&gt;&lt;/a&gt;_config.post.yml中的配置对所有文章生效，而_config.page.yml中的配置对所有自定义页面生效。&lt;/h6&gt;&lt;h6 id=&quot;这两个文件将覆盖主题配置文件中的配置。&quot;&gt;&lt;a href=&quot;#这两个文件将覆盖主题配置文件中的配置。&quot; class=&quot;headerlink&quot; title=&quot;这两个文件将覆盖主题配置文件中的配置。&quot;&gt;&lt;/a&gt;这两个文件将覆盖主题配置文件中的配置。&lt;/h6&gt;&lt;p&gt;############# 例如，你可以在_config.post.yml中把所有文章变为两栏布局：&lt;br&gt;############# 在_config.post.yml文件&lt;br&gt;############# widgets:&lt;br&gt;############# -&lt;br&gt;############# type: recent_posts&lt;br&gt;############# position: left&lt;br&gt;############# -&lt;br&gt;############# type: categories&lt;br&gt;############# position: left&lt;br&gt;############# -&lt;br&gt;############# type: tags&lt;br&gt;############# position: left&lt;br&gt;############# 同时所有其他页面仍保持三栏布局：&lt;br&gt;#############&lt;br&gt;############# 在_config.icarus.yml文件&lt;br&gt;############# widgets:&lt;br&gt;############# -&lt;br&gt;############# type: recent_posts&lt;br&gt;############# position: left&lt;br&gt;############# -&lt;br&gt;############# type: categories&lt;br&gt;############# position: right&lt;br&gt;############# -&lt;br&gt;############# type: tags&lt;br&gt;############# position: right&lt;br&gt;widgets:&lt;br&gt; # Profile widget configurations&lt;br&gt; -&lt;br&gt; # Where should the widget be placed, left sidebar or right sidebar&lt;br&gt; # 个人信息面板部件位置&lt;br&gt; position: left&lt;br&gt; type: profile&lt;/p&gt;&lt;pre&gt;&lt;code&gt; # Author name # 作者名称 author: Zhang&amp;#39;s Blog # Author title # 作者签名 author_title: 长路漫漫，未来可期 # Author&amp;#39;s current location # 作者所在地 location: 中国 · 深圳 # URL or path to the avatar image # 头像图片地址 avatar: /img/avatar.png # Whether show the rounded avatar image # 是否显示圆形头像 avatar_rounded: true # Email address for the Gravatar # Gravatar邮箱(如不设置`avatar`项) gravatar: # mooneyzw@foxmail.com # URL or path for the follow button # 关注按钮链接地址 follow_link: &amp;#39;https://github.com/local-host-8080&amp;#39; # Links to be shown on the bottom of the profile widget # 社交媒体链接 social_links: Github: icon: fab fa-github url: &amp;#39;https://github.com/local-host-8080&amp;#39; Bilibili: icon: fab fa-youtube url: &amp;#39;https://space.bilibili.com/32683063&amp;#39; QQ_Group: icon: fab fa-qq url: &amp;#39;https://jq.qq.com/?_wv=1027&amp;amp;k=YyEBTYat&amp;#39; Email: icon: fas fa-envelope url: &amp;#39;mailto:mooneyzw@foxmail.com&amp;#39; # RSS: # icon: fas fa-rss # url: /# Table of contents widget configurations# 目录组件-右侧固定- # Where should the widget be placed, left sidebar or right sidebar # 小部件应该放在哪里，左边栏还是右边栏 position: right type: toc # Whether to show the index of each heading # 是否显示每个标题的索引 index: true # Whether to collapse sub-headings when they are out-of-view # 当子标题看不见时是否折叠它们 collapsed: true # Maximum level of headings to show (1-6) # 要显示的标题的最大级别 depth: 3# Recent posts widget configurations# 最新文章组件- # Where should the widget be placed, left sidebar or right sidebar # 小部件应该放在哪里，左边栏还是右边栏 # 最新文章 position: right type: recent_posts# Archives widget configurations# 分类组件- # Where should the widget be placed, left sidebar or right sidebar # 小部件应该放在哪里，左边栏还是右边栏 # 文章归档 position: right type: archives# Categories widget configurations# 分类组件- # Where should the widget be placed, left sidebar or right sidebar # 小部件应该放在哪里，左边栏还是右边栏 # 文章分类 position: left type: categories# Tags widget configurations# 标签组件- # Where should the widget be placed, left sidebar or right sidebar # 小部件应该放在哪里，左边栏还是右边栏 # 文章标签 position: left type: tags# Recommendation links widget configurations# 链接组件- # Where should the widget be placed, left sidebar or right sidebar # 小部件应该放在哪里，左边栏还是右边栏 position: left type: links # Names and URLs of the sites # 友站名称与链接 links: Hexo: &amp;#39;https://hexo.io&amp;#39; 哔哩哔哩: &amp;#39;https://www.bilibili.com/&amp;#39;# Google FeedBurner email subscription widget configurations# 订阅更新组件# -# # Where should the widget be placed, left sidebar or right sidebar# # 小部件应该放在哪里，左边栏还是右边栏# position: left# type: subscribe_email# # Hint text under the email input# description: # # Feedburner ID# feedburner_id: &amp;#39;&amp;#39;# Google AdSense unit configurations# 广告组件# -# # Where should the widget be placed, left sidebar or right sidebar# # 小部件应该放在哪里，左边栏还是右边栏# position: left# type: adsense# # AdSense client ID# client_id: &amp;#39;&amp;#39;# # AdSense AD unit ID# slot_id: &amp;#39;&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##################################################################################################################### 插件&lt;/p&gt;&lt;h1 id=&quot;Plugin-configurations&quot;&gt;&lt;a href=&quot;#Plugin-configurations&quot; class=&quot;headerlink&quot; title=&quot;Plugin configurations&quot;&gt;&lt;/a&gt;Plugin configurations&lt;/h1&gt;&lt;h1 id=&quot;https-ppoffice-github-io-hexo-theme-icarus-categories-Plugins&quot;&gt;&lt;a href=&quot;#https-ppoffice-github-io-hexo-theme-icarus-categories-Plugins&quot; class=&quot;headerlink&quot; title=&quot;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/&quot;&gt;https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;plugins:&lt;br&gt; # Enable page startup animations&lt;br&gt; # 网页载入动画，Icarus默认启用网页载入动画&lt;br&gt; animejs: true&lt;br&gt; # Show the “back to top” button&lt;br&gt; back_to_top: true&lt;br&gt; # Baidu Analytics plugin settings&lt;br&gt; # &lt;a href=&quot;https://tongji.baidu.com/&quot;&gt;https://tongji.baidu.com&lt;/a&gt;&lt;br&gt; baidu_analytics:&lt;br&gt; # Baidu Analytics tracking ID&lt;br&gt; tracking_id:&lt;br&gt; # Bing Webmaster Tools plugin settings&lt;br&gt; # &lt;a href=&quot;https://www.bing.com/toolbox/webmaster/&quot;&gt;https://www.bing.com/toolbox/webmaster/&lt;/a&gt;&lt;br&gt; bing_webmaster:&lt;br&gt; # Bing Webmaster Tools tracking ID in the &lt;meta&gt; tag&lt;br&gt; tracking_id:&lt;br&gt; # BuSuanZi site/page view counter&lt;br&gt; # &lt;a href=&quot;https://busuanzi.ibruce.info/&quot;&gt;https://busuanzi.ibruce.info&lt;/a&gt;&lt;br&gt; busuanzi: true&lt;br&gt; # CNZZ statistics&lt;br&gt; # &lt;a href=&quot;https://www.umeng.com/web&quot;&gt;https://www.umeng.com/web&lt;/a&gt;&lt;br&gt; cnzz:&lt;br&gt; # CNZZ tracker id&lt;br&gt; id:&lt;br&gt; # CNZZ website id&lt;br&gt; web_id:&lt;br&gt; # Alerting users about the use of cookies&lt;br&gt; # &lt;a href=&quot;https://www.osano.com/cookieconsent/&quot;&gt;https://www.osano.com/cookieconsent/&lt;/a&gt;&lt;br&gt; cookie_consent:&lt;br&gt; # The compliance type. Can be “info”, “opt-in”, or “opt-out”&lt;br&gt; # 同意对话框类型。可以为”info”，”opt-in”，或”opt-out”&lt;br&gt; type: info&lt;br&gt; # Theme of the popup. Can be “block”, “edgeless”, or “classic”&lt;br&gt; # 弹出框主题。可以为”block”，”edgeless”，或”classic”&lt;br&gt; theme: edgeless&lt;br&gt; # Whether the popup should stay static regardless of the page scrolls&lt;br&gt; # 是否使弹出框固定，不随页面滚动而滚动&lt;br&gt; static: false&lt;br&gt; # Where on the screen the consent popup should display&lt;br&gt; # 弹出框在屏幕上的位置&lt;br&gt; position: bottom-left&lt;br&gt; # URL to your site’s cookie policy&lt;br&gt; # 你网站的Cookie协议的URL&lt;br&gt; policyLink: ‘&lt;a href=&quot;https://www.cookiesandyou.com/&amp;#39;&quot;&gt;https://www.cookiesandyou.com/&amp;#39;&lt;/a&gt;&lt;br&gt; # Enable the lightGallery and Justified Gallery plugins&lt;br&gt; # 画廊插件&lt;br&gt; ###### Icarus的画廊插件同时包含了lightGallery与 Justified Gallery两种插件。&lt;br&gt; ###### 若要启用画廊插件，请将主题配置中plugins &amp;gt; gallery的值设置为true。&lt;br&gt; ###### 参考&lt;a href=&quot;https://blog.zhangruipeng.me/hexo-theme-icarus/Plugins/Other/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E5%85%B6%E4%BB%96%E6%8F%92%E4%BB%B6/&quot;&gt;https://blog.zhangruipeng.me/hexo-theme-icarus/Plugins/Other/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E5%85%B6%E4%BB%96%E6%8F%92%E4%BB%B6/&lt;/a&gt;&lt;br&gt; gallery: true&lt;br&gt; # Google Analytics plugin settings&lt;br&gt; # &lt;a href=&quot;https://analytics.google.com/&quot;&gt;https://analytics.google.com&lt;/a&gt;&lt;br&gt; google_analytics:&lt;br&gt; # Google Analytics tracking ID&lt;br&gt; tracking_id:&lt;br&gt; # Hotjar user feedback plugin&lt;br&gt; # &lt;a href=&quot;https://www.hotjar.com/&quot;&gt;https://www.hotjar.com/&lt;/a&gt;&lt;br&gt; hotjar:&lt;br&gt; # Hotjar site id&lt;br&gt; site_id:&lt;br&gt; # Enable the KaTeX math typesetting support&lt;br&gt; # &lt;a href=&quot;https://katex.org/&quot;&gt;https://katex.org/&lt;/a&gt;&lt;br&gt; # 数学公式渲染&lt;br&gt; ###### 你可以使用KaTeX插件来渲染TEX数学公式。 若要启用KaTeX插件，请将主题配置中plugins &amp;gt; katex的值设置为true。&lt;br&gt; katex: false&lt;br&gt; # Enable the MathJax math typesetting support&lt;br&gt; # &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;https://www.mathjax.org/&lt;/a&gt;&lt;br&gt; mathjax: false&lt;br&gt; # Enable the Outdated Browser plugin&lt;br&gt; # &lt;a href=&quot;http://outdatedbrowser.com/&quot;&gt;http://outdatedbrowser.com/&lt;/a&gt;&lt;br&gt; # 浏览器升级提醒&lt;br&gt; # 你可以使用浏览器升级提醒(Outdated Browser)插件来检测你的网站访客使用的老旧浏览器，并提醒他们升级浏览器。&lt;br&gt; # 若要启用此插件，请将主题配置中plugins &amp;gt; outdated_browser的值设置为true。&lt;br&gt; outdated_browser: false&lt;br&gt; # Show a progress bar at top of the page on page loading&lt;br&gt; # 网页载入进度条&lt;br&gt; progressbar: true&lt;br&gt; # Statcounter statistics&lt;br&gt; # &lt;a href=&quot;https://statcounter.com/&quot;&gt;https://statcounter.com/&lt;/a&gt;&lt;br&gt; statcounter:&lt;br&gt; # Statcounter project id&lt;br&gt; project:&lt;br&gt; # Statcounter project security code&lt;br&gt; security:&lt;br&gt; # Twitter conversion tracking plugin settings&lt;br&gt; # &lt;a href=&quot;https://business.twitter.com/en/help/campaign-measurement-and-analytics/conversion-tracking-for-websites.html&quot;&gt;https://business.twitter.com/en/help/campaign-measurement-and-analytics/conversion-tracking-for-websites.html&lt;/a&gt;&lt;br&gt; twitter_conversion_tracking:&lt;br&gt; # Twitter Pixel ID&lt;br&gt; pixel_id: &lt;/p&gt;&lt;p&gt;##################################################################################################################### CDN加速&lt;/p&gt;&lt;h1 id=&quot;CDN-provider-settings&quot;&gt;&lt;a href=&quot;#CDN-provider-settings&quot; class=&quot;headerlink&quot; title=&quot;CDN provider settings&quot;&gt;&lt;/a&gt;CDN provider settings&lt;/h1&gt;&lt;h1 id=&quot;https-ppoffice-github-io-hexo-theme-icarus-Configuration-Theme-speed-up-your-site-with-custom-cdn&quot;&gt;&lt;a href=&quot;#https-ppoffice-github-io-hexo-theme-icarus-Configuration-Theme-speed-up-your-site-with-custom-cdn&quot; class=&quot;headerlink&quot; title=&quot;https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/speed-up-your-site-with-custom-cdn/&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/speed-up-your-site-with-custom-cdn/&quot;&gt;https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/speed-up-your-site-with-custom-cdn/&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;providers:&lt;br&gt; # Name or URL template of the JavaScript and/or stylesheet CDN provider&lt;br&gt; cdn: jsdelivr&lt;br&gt; # Name or URL template of the webfont CDN provider&lt;br&gt; fontcdn: google&lt;br&gt; # Name or URL of the fontawesome icon font CDN provider&lt;br&gt; # iconcdn: fontawesome&lt;br&gt; iconcdn: &lt;a href=&quot;https://cdn.bootcdn.net/ajax/libs/font-awesome/5.12.0/css/all.css&quot;&gt;https://cdn.bootcdn.net/ajax/libs/font-awesome/5.12.0/css/all.css&lt;/a&gt;&lt;/p&gt;&lt;p&gt;#####################################################################################################################&lt;/p&gt;&lt;h1 id=&quot;文章-页面的Front-matter&quot;&gt;&lt;a href=&quot;#文章-页面的Front-matter&quot; class=&quot;headerlink&quot; title=&quot;文章/页面的Front-matter&quot;&gt;&lt;/a&gt;文章/页面的Front-matter&lt;/h1&gt;&lt;h3 id=&quot;如果你只想要在某个文章-页面中覆盖主题配置，你可以在那个文章-页面的front-matter中写下配置。&quot;&gt;&lt;a href=&quot;#如果你只想要在某个文章-页面中覆盖主题配置，你可以在那个文章-页面的front-matter中写下配置。&quot; class=&quot;headerlink&quot; title=&quot;如果你只想要在某个文章/页面中覆盖主题配置，你可以在那个文章/页面的front-matter中写下配置。&quot;&gt;&lt;/a&gt;如果你只想要在某个文章/页面中覆盖主题配置，你可以在那个文章/页面的front-matter中写下配置。&lt;/h3&gt;&lt;h3 id=&quot;例如，你可以像下面这样在一篇文章的front-matter中更改某篇文章的代码高亮主题：&quot;&gt;&lt;a href=&quot;#例如，你可以像下面这样在一篇文章的front-matter中更改某篇文章的代码高亮主题：&quot; class=&quot;headerlink&quot; title=&quot;例如，你可以像下面这样在一篇文章的front-matter中更改某篇文章的代码高亮主题：&quot;&gt;&lt;/a&gt;例如，你可以像下面这样在一篇文章的front-matter中更改某篇文章的代码高亮主题：&lt;/h3&gt;&lt;h3 id=&quot;在source-post-some-post-md文件&quot;&gt;&lt;a href=&quot;#在source-post-some-post-md文件&quot; class=&quot;headerlink&quot; title=&quot;在source/_post/some-post.md文件&quot;&gt;&lt;/a&gt;在source/_post/some-post.md文件&lt;/h3&gt;&lt;h3 id=&quot;title-我的第一篇文章&quot;&gt;&lt;a href=&quot;#title-我的第一篇文章&quot; class=&quot;headerlink&quot; title=&quot;title: 我的第一篇文章&quot;&gt;&lt;/a&gt;title: 我的第一篇文章&lt;/h3&gt;&lt;h3 id=&quot;date-‘2015-01-01-00-00-01’&quot;&gt;&lt;a href=&quot;#date-‘2015-01-01-00-00-01’&quot; class=&quot;headerlink&quot; title=&quot;date: ‘2015-01-01 00:00:01’&quot;&gt;&lt;/a&gt;date: ‘2015-01-01 00:00:01’&lt;/h3&gt;&lt;h3 id=&quot;article&quot;&gt;&lt;a href=&quot;#article&quot; class=&quot;headerlink&quot; title=&quot;article:&quot;&gt;&lt;/a&gt;article:&lt;/h3&gt;&lt;h3 id=&quot;highlight&quot;&gt;&lt;a href=&quot;#highlight&quot; class=&quot;headerlink&quot; title=&quot;highlight:&quot;&gt;&lt;/a&gt;highlight:&lt;/h3&gt;&lt;h3 id=&quot;theme-atom-one-dark&quot;&gt;&lt;a href=&quot;#theme-atom-one-dark&quot; class=&quot;headerlink&quot; title=&quot;theme: atom-one-dark&quot;&gt;&lt;/a&gt;theme: atom-one-dark&lt;/h3&gt;&lt;h3 id=&quot;—&quot;&gt;&lt;a href=&quot;#—&quot; class=&quot;headerlink&quot; title=&quot;—&quot;&gt;&lt;/a&gt;—&lt;/h3&gt;&lt;h3 id=&quot;文章标题&quot;&gt;&lt;a href=&quot;#文章标题&quot; class=&quot;headerlink&quot; title=&quot;# 文章标题&quot;&gt;&lt;/a&gt;# 文章标题&lt;/h3&gt;&lt;p&gt;#####################################################################################################################&lt;/p&gt;&lt;h3 id=&quot;上面的配置会为那篇文章覆盖掉-config-post-yml和-config-icarus-yml中的article-highlight。&quot;&gt;&lt;a href=&quot;#上面的配置会为那篇文章覆盖掉-config-post-yml和-config-icarus-yml中的article-highlight。&quot; class=&quot;headerlink&quot; title=&quot;上面的配置会为那篇文章覆盖掉_config.post.yml和_config.icarus.yml中的article.highlight。&quot;&gt;&lt;/a&gt;上面的配置会为那篇文章覆盖掉_config.post.yml和_config.icarus.yml中的article.highlight。&lt;/h3&gt;&lt;h3 id=&quot;这种层次化的配置系统对于页面个性化和不同访客间的差异化优化十分有效。&quot;&gt;&lt;a href=&quot;#这种层次化的配置系统对于页面个性化和不同访客间的差异化优化十分有效。&quot; class=&quot;headerlink&quot; title=&quot;这种层次化的配置系统对于页面个性化和不同访客间的差异化优化十分有效。&quot;&gt;&lt;/a&gt;这种层次化的配置系统对于页面个性化和不同访客间的差异化优化十分有效。&lt;/h3&gt;&lt;h3 id=&quot;比如，你可以为根据你页面目标访客的国家和语言来开启更快的CDN或本地化的评论服务。&quot;&gt;&lt;a href=&quot;#比如，你可以为根据你页面目标访客的国家和语言来开启更快的CDN或本地化的评论服务。&quot; class=&quot;headerlink&quot; title=&quot;比如，你可以为根据你页面目标访客的国家和语言来开启更快的CDN或本地化的评论服务。&quot;&gt;&lt;/a&gt;比如，你可以为根据你页面目标访客的国家和语言来开启更快的CDN或本地化的评论服务。&lt;/h3&gt;&lt;h3 id=&quot;然而需要注意的是，一些Hexo定义的文章或页面属性不会覆盖掉其他配置源中的同名配置，&quot;&gt;&lt;a href=&quot;#然而需要注意的是，一些Hexo定义的文章或页面属性不会覆盖掉其他配置源中的同名配置，&quot; class=&quot;headerlink&quot; title=&quot;然而需要注意的是，一些Hexo定义的文章或页面属性不会覆盖掉其他配置源中的同名配置，&quot;&gt;&lt;/a&gt;然而需要注意的是，一些Hexo定义的文章或页面属性不会覆盖掉其他配置源中的同名配置，&lt;/h3&gt;&lt;h3 id=&quot;如-title-date-updated-comments-not-comment-layout-source-photos-和excerpt。&quot;&gt;&lt;a href=&quot;#如-title-date-updated-comments-not-comment-layout-source-photos-和excerpt。&quot; class=&quot;headerlink&quot; title=&quot;如 title, date, updated, comments (not comment), layout, source, photos, 和excerpt。&quot;&gt;&lt;/a&gt;如 title, date, updated, comments (not comment), layout, source, photos, 和excerpt。&lt;/h3&gt;&lt;p&gt;#####################################################################################################################&lt;/p&gt;&lt;h1 id=&quot;站点配置文件&quot;&gt;&lt;a href=&quot;#站点配置文件&quot; class=&quot;headerlink&quot; title=&quot;站点配置文件&quot;&gt;&lt;/a&gt;站点配置文件&lt;/h1&gt;&lt;h3 id=&quot;上面列出的所有配置源，包括主题配置文件，布局配置文件，和文章-页面的front-matter，&quot;&gt;&lt;a href=&quot;#上面列出的所有配置源，包括主题配置文件，布局配置文件，和文章-页面的front-matter，&quot; class=&quot;headerlink&quot; title=&quot;上面列出的所有配置源，包括主题配置文件，布局配置文件，和文章/页面的front-matter，&quot;&gt;&lt;/a&gt;上面列出的所有配置源，包括主题配置文件，布局配置文件，和文章/页面的front-matter，&lt;/h3&gt;&lt;h3 id=&quot;会覆盖掉站点配置文件中Icarus使用到的配置。&quot;&gt;&lt;a href=&quot;#会覆盖掉站点配置文件中Icarus使用到的配置。&quot; class=&quot;headerlink&quot; title=&quot;会覆盖掉站点配置文件中Icarus使用到的配置。&quot;&gt;&lt;/a&gt;会覆盖掉站点配置文件中Icarus使用到的配置。&lt;/h3&gt;&lt;h3 id=&quot;例如，-config-icarus-yml中的title设置会覆盖掉-config-yml中的title，&quot;&gt;&lt;a href=&quot;#例如，-config-icarus-yml中的title设置会覆盖掉-config-yml中的title，&quot; class=&quot;headerlink&quot; title=&quot;例如，_config.icarus.yml中的title设置会覆盖掉_config.yml中的title，&quot;&gt;&lt;/a&gt;例如，_config.icarus.yml中的title设置会覆盖掉_config.yml中的title，&lt;/h3&gt;&lt;h3 id=&quot;但new-post-name却不会，因为-Icarus-没有用到这个配置项。&quot;&gt;&lt;a href=&quot;#但new-post-name却不会，因为-Icarus-没有用到这个配置项。&quot; class=&quot;headerlink&quot; title=&quot;但new_post_name却不会，因为 Icarus 没有用到这个配置项。&quot;&gt;&lt;/a&gt;但new_post_name却不会，因为 Icarus 没有用到这个配置项。&lt;/h3&gt;&lt;h3 id=&quot;另外，主题配置文件中的theme-config选项会与主题配置文件中的主题配置合并并覆盖掉同名配置。&quot;&gt;&lt;a href=&quot;#另外，主题配置文件中的theme-config选项会与主题配置文件中的主题配置合并并覆盖掉同名配置。&quot; class=&quot;headerlink&quot; title=&quot;另外，主题配置文件中的theme_config选项会与主题配置文件中的主题配置合并并覆盖掉同名配置。&quot;&gt;&lt;/a&gt;另外，主题配置文件中的theme_config选项会与主题配置文件中的主题配置合并并覆盖掉同名配置。&lt;/h3&gt;&lt;h3 id=&quot;然而，我们非常不推荐使用这个配置选项。&quot;&gt;&lt;a href=&quot;#然而，我们非常不推荐使用这个配置选项。&quot; class=&quot;headerlink&quot; title=&quot;然而，我们非常不推荐使用这个配置选项。&quot;&gt;&lt;/a&gt;然而，我们非常不推荐使用这个配置选项。&lt;/h3&gt;&lt;p&gt;#####################################################################################################################&lt;/p&gt; _config.page.yml 配置文件_config.page.yml >folded12345678910111213141516171819202122232425262728293031323334353637383940414243444546# _config.page.yml中的配置对所有自定义页面生效，比如“关于我”widgets: # 个人信息组件 # - # type: profile # position: right # 最新文章组件 # - # type: recent_posts # position: left # 分类组件 # - # type: categories # position: right # 标签组件 # - # type: tags # position: right # 时间轴|归档组件 # - # type: archives # position: right # 链接组件 # - # type: links # position: right # 目录组件 # - # type: toc # position: right # 订阅更新组件 # - # type: subscribe_email # position: right # 广告组件 # - # type: adsense # position: right _config.post.yml 配置文件_config.post.yml >folded1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# _config.post.yml中的配置对所有“文章”生效widgets: # 个人信息组件 # - # type: profile # position: right # 最新文章组件 # - # type: recent_posts # position: left # 分类组件 # - # type: categories # position: right # 标签组件 # - # type: tags # position: right # 时间轴|归档组件 # - # type: archives # position: right # 链接组件 # - # type: links # position: right # 目录组件 - type: toc position: left # 订阅更新组件 # - # type: subscribe_email # position: right # 广告组件 # - # type: adsense # position: right##################################################################################################################### 侧边栏滚动# Sidebar configurations.# Please be noted that a sidebar is only visible when it has at least one widget# 侧边栏###### 设置sidebar中某个侧边栏的sticky为true来让它的位置固定而不跟随页面滚动。sidebar: # Left sidebar configurations # 左侧边栏设置 left: # Whether the sidebar sticks to the top when page scrolls # 是否不随页面滚动 sticky: true # Right sidebar configurations # 右侧边栏设置 right: # Whether the sidebar sticks to the top when page scrolls # 是否不随页面滚动 sticky: false 大概就是这样了，直接将配置文件全选复制粘贴就可以了。","link":"/2020/11/19/11_Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%E4%BA%8C/"},{"title":"如何在 GitHub 上给开源项目贡献代码","text":"GitHub 是什么？ GitHub 是通过 Git 进行版本控制的软件源代码托管服务。 截止到 2015年，GitHub 已经有超过 2800 万注册用户和 7900 万代码库。事实上已经成为了世界上最大的代码存放网站和开源社区。 所以，如果你想要给开源项目贡献代码或者翻译文档，学会如何使用 GitHub 来正确地贡献代码是必不可少的。 如何使用 GitHub Flow 给开源项目贡献代码 准备工作 关于 git 的基本操作。 GitHub 网站的账户。 将示例仓库 https://github.com/golang/go 记录在某处。 这里我们假设你的用户名为 yourname。 复制（fork）一个仓库的副本打开示例仓库的 URL，在右上角点击 Fork 按钮后，开始等待完成。 等待的时间视仓库的大小而定。 在 fork 完成后，你应该可以在你自己的 GitHub 仓库看到同名的一个项目。 它的 URL 应该为：https://github.com/yourname/go。 发现了吗？这里 URL 的变化只不过是将原本的 golang 替换成了 yourname。 这个 fork 后的项目是你自己可以随意修改而不会影响到真正的 go 项目的。下面我们把它称之为副本仓库。 在没有示例仓库的 push 权限的情况下，想要做出的修改能够反映到示例仓库，也就是原始仓库，还需要做接下来的一些操作。 克隆（clone）副本仓库到本地把你 fork 后的副本仓库 clone 到本地。 1git clone https://github.com/yourname/go go # clone 到本地的 go 目录 使用分支（branch）进入仓库目录后，可以使用如下命令创建并切换到 test 分支。 1git checkout -b test # 创建并切换到 test 分支 在本地仓库提交（commit）在这个 test 分支下经过一些修改后，你需要提交这些修改到本地仓库。 可以使用相关命令： 12git add -A # 添加所有文件git commit -m 'Add test' # 提交 commit 先别急着 push，我们还有个大问题要解决。 跟原始仓库（upstream）合并前面已经说过，在副本仓库做的修改是不会影响到原始仓库的。同样，在原始仓库的更新也不会反映到副本仓库来。 在 GitHub，如果你副本仓库的进度落后于原始仓库还坚持发起 Pull Request，后果只会是被拒绝。 那么问题来了，我们应该如何同步原始仓库的更新呢？ 答案是：区别于 origin，它是用来向副本仓库提交更新的远程仓库；我们添加一个 upstream，也被称为 上游 是专门用来同步原始仓库更新的远程仓库。 在默认情况下，在你 clone 后的仓库目录里，git 已经自动将 origin 和你的副本仓库关联在一起了，也就是 https://github.com/yourname/go。 你可以通过如下命令查看。 1git remote -vv # 两个 verbose 参数查看远程仓库 然后，通过如下命令添加这个 upstream，使用这个名字只是约定俗成，你可以用你觉得更好的名字来替换它。 1git remote add upstream git@github.com:golang/go.git # 添加 upstream 远程仓库 现在，我们假设在做出修改后，上游（upstream）已经更新了很多提交。 此时如果对上游的变化视而不见，强行 push 并发起 Pull Request 还是会被拒绝。 可以通过如下命令拉取并合并上游的更新： 123456git checkout master # 切换到默认存在的 master 分支git pull --rebase upstream master:master # 使用 rebase 模式拉取 upstream/master 上的更新# 且与本地的 master 合并。第一个 master 是远程分支，第二个是本地分支。git checkout test # 切换到前面建立的 test 分支git rebase master # 使用 rebase 模式合并本地的 test 和 master 分支 也可以通过另一种方式： 1234git checkout master # 切换到 master 分支git fetch upstream master # 获取 upstream 上的 master 分支git checkout testgit rebase upstream/master # 使用 rebase 模式合并本地的 test 和 upstream/master 分支 总的来说，可以把本地的 master 分支当作一个只负责从上游获取更新的分支，所有本地的改动都不会直接在 master 上面进行。 而是先将上游的 master 和本地的 master 合并，此时，本地的 master 是上游的最新版本； 再通过合并 test 和本地的 master 来完成本地改动的更新。整个过程在未开始合并之前，你的代码更新应该只会出现在 test 分支上。 注意：在使用 git rebase 相关的命令时，需要谨慎应用在已经提交的更新或远程仓库上。s 推送（push）到副本仓库现在，我们已经完成代码的修改、上游的同步更新并且完成了合并。 接下来应该将代码 push 到副本仓库。 12git push origin test # 将本地 test 分支的代码 push 到 origin 的 test 分支 # 如果该分支不存在则会创建 这个 push 只会更新副本仓库，并不会影响到原始仓库。 要将代码贡献到原始仓库，还要发起 Pull Request。 发起合并请求（Pull Request）现代的 GitHub 网站已经为我们发起 Pull Request 做了大多数的幕后工作。下面分别说明两种方法： 在 push 代码后，直接登录到 GitHub 网站，它会智能识别并弹出按钮 Compare &amp; pull request，点击后填写一些信息即可发起。 还有一种方式，在副本仓库的页面点击你更新的分支，再点击 New pull Request。 出现如下界面： 再点击 Create pull request 后填写一些信息即可。 接下来，原始项目的相关负责人就会审查（review）你的提交，并决定是通过还是拒绝。 当你的提交有问题时，负责人还会让你做出一些修改才给予通过。 当你发现想要对其贡献代码的开源项目已经很久没有更新时，需要谨慎一些。否则会发现在你发起 Pull Request 后无人理会，做了许多无谓的工作。发生这种情况可能是负责人已经放弃了这个项目。 至此，我们已经完成使用 GitHub Flow 向开源项目贡献代码的全部步骤。 参考链接Git 工作流程如何在 Github 给开源项目贡献代码","link":"/2019/07/10/7_%E5%9C%A8GitHub%E4%B8%8A%E7%BB%99%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E8%B4%A1%E7%8C%AE%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"RSS","slug":"RSS","link":"/tags/RSS/"},{"name":"看板娘","slug":"看板娘","link":"/tags/%E7%9C%8B%E6%9D%BF%E5%A8%98/"},{"name":"测试","slug":"测试","link":"/tags/%E6%B5%8B%E8%AF%95/"},{"name":"C语言","slug":"C语言","link":"/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"复杂度分析","slug":"复杂度分析","link":"/tags/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"},{"name":"素数判断","slug":"素数判断","link":"/tags/%E7%B4%A0%E6%95%B0%E5%88%A4%E6%96%AD/"},{"name":"快速排序","slug":"快速排序","link":"/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"},{"name":"SSH","slug":"SSH","link":"/tags/SSH/"},{"name":"知乎","slug":"知乎","link":"/tags/%E7%9F%A5%E4%B9%8E/"},{"name":"转载","slug":"转载","link":"/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"学习","slug":"学习","link":"/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"富研社","slug":"富研社","link":"/tags/%E5%AF%8C%E7%A0%94%E7%A4%BE/"},{"name":"人生密码","slug":"人生密码","link":"/tags/%E4%BA%BA%E7%94%9F%E5%AF%86%E7%A0%81/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"站点测试","slug":"站点测试","link":"/categories/%E7%AB%99%E7%82%B9%E6%B5%8B%E8%AF%95/"},{"name":"icarus","slug":"Hexo/icarus","link":"/categories/Hexo/icarus/"},{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"},{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"思维能力","slug":"思维能力","link":"/categories/%E6%80%9D%E7%BB%B4%E8%83%BD%E5%8A%9B/"}]}